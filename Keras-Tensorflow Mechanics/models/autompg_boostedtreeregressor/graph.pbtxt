node {
  name: "global_step/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "global_step"
    }
  }
}
node {
  name: "global_step/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "global_step"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/Assign"
  op: "AssignVariableOp"
  input: "global_step"
  input: "global_step/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "global_step/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "global_step"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "global_step/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "global_step"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond"
  op: "If"
  input: "global_step/VarIsInitializedOp"
  input: "global_step"
  input: "global_step/Initializer/zeros"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_RESOURCE
        type: DT_INT64
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_INT64
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
        i: 1
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "global_step_cond_false_41"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "global_step_cond_true_40"
      }
    }
  }
}
node {
  name: "global_step/cond/Identity"
  op: "Identity"
  input: "global_step/cond"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/add/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step/add"
  op: "AddV2"
  input: "global_step/cond/Identity"
  input: "global_step/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "normalize_element/component_0"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 313
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 313
          }
        }
        tensor_content: "\262\277\330\276tB\355?\213\232I\217\3208\341?\037-\021\247\242=\347?\200g+\027\356\350\350\277\312\213aS\330W\000@\365f,\251C\035\320\277\022\246\243\001\267\264\232\277\260\2048\317\223\276\331\277\302\232\205=0\030\371\277\260\2048\317\223\276\331\277\356\017\004\357\374g\326?\250\362o%l\205\354\277\210\223>\342;\217\336\2779\223\344\\,\300\002@\236\017A/\262{\365\277\262\277\330\276tB\355?\024\372\362.\300\355\356\277\021\277R?\337i\313\277\350\213\177*\210G\364\277\350\213\177*\210G\364\277\236\017A/\262{\365\2771\242\010G\204\200\373\277\027\357\217\200g\307\013@\260\2048\317\223\276\331\277v\010\201\345\250\377\323?TF]#Iy\362\277#)Pk\243\243\361?c\032h/\253\302\000\300\024\372\362.\300\355\356\277b\241F\031\217\310\301\277\021\277R?\337i\313\277\200g+\027\356\350\350\277TF]#Iy\362\277\356\017\004\357\374g\326?:\260L,7\231\306\277\354\324c\377\033\344\342\277\001\353\260m\270=\362?an\257\262\227\205\322\277\250\362o%l\205\354\277\367\241\314\230$\241\343?\273o\273\261\3026\266?4\007u\346}N\260\277\345>\332\031\365\020\360\277\312\213aS\330W\000@\337F\\\221\363D\373?\354\324c\377\033\344\342\277\263%\216\235N\325\344?\262\277\330\276tB\355?4\007u\346}N\260\277\200g+\027\356\350\350\277%\364\024\3366\r\003@\260\2048\317\223\276\331\277\236\017A/\262{\365\277\022\246\243\001\267\264\232\277\273o\273\261\3026\266?\024\372\362.\300\355\356\277\022\246\243\001\267\264\232\277\036\307[\310\310\252\357?\260\2048\317\223\276\331\277\021\277R?\337i\313\277>&\215\013\371\240\335?\250\362o%l\205\354\277\354\324c\377\033\344\342\277\357\026\246aV\364\003@\354\324c\377\033\344\342\277m\3623w\014\246\364?\354\324c\377\033\344\342\277an\257\262\227\205\322\277\260\2048\317\223\276\331\277\021\277R?\337i\313\277c\032h/\253\302\000\300#)Pk\243\243\361?\356\017\004\357\374g\326?\302\232\205=0\030\371\277m\3623w\014\246\364?c\251O\242x\t\346?\022\246\243\001\267\264\232\277\215\325\351~\261\274\304?v\010\201\345\250\377\323?\260\2048\317\223\276\331\277#v\365{6\332\365?f\027\207\370P\320\330?TF]#Iy\362\2776Q\242\372\361\257\341\277\365f,\251C\035\320\277\250\362o%l\205\354\277\365f,\251C\035\320\277\213\232I\217\3208\341?>&\215\013\371\240\335?\215\325\351~\261\274\304?\021\277R?\337i\313\277F\270U\265 \332\352?\036\307[\310\310\252\357?\331\254\021p\315\327\362?\260\2048\317\223\276\331\277\001\322\240\237q\341\376?X\334\346\010pL\345\2771\242\010G\204\200\373\277\024\372\362.\300\355\356\277\347\330$;\033~\370\277\024\372\362.\300\355\356\277\273o\273\261\3026\266?\021\277R?\337i\313\277\213\232I\217\3208\341?4\007u\346}N\260\277v\010\201\345\250\377\323?#v\365{6\332\365?\034\214\273\330\347&\334\277\200g+\027\356\350\350\277\024`\250\r\232\200\346\277\356\017\004\357\374g\326?:\260L,7\231\306\277\263%\216\235N\325\344?\213\232I\217\3208\341?\330u2\274\353\355\324\277\260\2048\317\223\276\331\277v\010\201\345\250\377\323?\312\213aS\330W\000@nC\232\303\236v\356?\215\325\351~\261\274\304?\021\277R?\337i\313\277\022\246\243\001\267\264\232\277\236\017A/\262{\365\277\333\260\322\253\314q\350?\262\277\330\276tB\355?\215\325\351~\261\274\304?\022\246\243\001\267\264\232\277m\3623w\014\246\364?\356\017\004\357\374g\326?m\3623w\014\246\364?\2134\224\260\366\245\351?\356\017\004\357\374g\326?\022\246\243\001\267\264\232\277\022\246\243\001\267\264\232\277\265\243^\027\345*\251?\303M\340,\235\341\364\277\034\214\273\330\347&\334\277\022\246\243\001\267\264\232\277\242X%\004F\030\344\277\236\017A/\262{\365\277j\215\307\327\022\330\277?1\242\010G\204\200\373\277\200g+\027\356\350\350\277\003\266u\340K\247\003@\037-\021\247\242=\347?\365f,\251C\035\320\277\345>\332\031\365\020\360\277\024\372\362.\300\355\356\277{\036GBZL\372\277\347\330$;\033~\370\277m\3623w\014\246\364?\333\260\322\253\314q\350?\356\017\004\357\374g\326?\022\246\243\001\267\264\232\277\267\273\027\203u\250\367?\260\2048\317\223\276\331\277c\032h/\253\302\000\300\003\003\033\361\336\335\007@}\344\357\221Y\215\311?\330u2\274\353\355\324\277\200g+\027\356\350\350\277\356\017\004\357\374g\326?=\363\365\244\001^\316?b\241F\031\217\310\301\277\024\372\362.\300\355\356\277\024\372\362.\300\355\356\277\300\000;\034\n\253\360\277X\334\346\010pL\345\277m\245\216fyo\360?\262\277\330\276tB\355?\306\036\n\002\2458\333?\262\277\330\276tB\355?\213\232I\217\3208\341?\317\026\210\212\246\004\340?\330u2\274\353\355\324\277\260\2048\317\223\276\331\277\356\017\004\357\374g\326?\215\325\351~\261\274\304?\344$\201\014\316\357\271\277m\3623w\014\246\364?\200g+\027\356\350\350\277=\363\365\244\001^\316?\330u2\274\353\355\324\277\260\2048\317\223\276\331\277\024\372\362.\300\355\356\277\200g+\027\356\350\350\277\331\371\266\200`\016\367?\200g+\027\356\350\350\277f\027\207\370P\320\330?\213\232I\217\3208\341?{k\354R\355\202\376\277\254\343K;\024\305\003\300\250\362o%l\205\354\277v\010\201\345\250\377\323?\260\2048\317\223\276\331\277\365f,\251C\035\320\277\215\325\351~\261\274\304?\022\246\243\001\267\264\232\277m\3623w\014\246\364?\312\343i\022\304\264\347\2771\242\010G\204\200\373\277\021\277R?\337i\313\277\260\2048\317\223\276\331\277TF]#Iy\362\277\354\324c\377\033\344\342\277\267\273\027\203u\250\367?\213\232I\217\3208\341?\260\2048\317\223\276\331\277\263%\216\235N\325\344?\260\2048\317\223\276\331\277\260\2048\317\223\276\331\277\300\000;\034\n\253\360\277\236\017A/\262{\365\277\036\307[\310\310\252\357?\225}x\205\212B\370?m\3623w\014\246\364?\273o\273\261\3026\266?\236\017A/\262{\365\277\317\026\210\212\246\004\340?\347\330$;\033~\370\277\215\325\351~\261\274\304?\021\277R?\337i\313\277\215\325\351~\261\274\304?\2134\224\260\366\245\351?\365f,\251C\035\320\277\022\246\243\001\267\264\232\277\267\273\027\203u\250\367?\022\246\243\001\267\264\232\277\306\036\n\002\2458\333?Y\241\031-\023\241\207?\024`\250\r\232\200\346\277\215\325\351~\261\274\304?\317\026\210\212\246\004\340?#\303\232\214\311\020\372?\215\325\351~\261\274\304?m\3623w\014\246\364?\021\277R?\337i\313\277\367\241\314\230$\241\343?\273o\273\261\3026\266?\312\213aS\330W\000@\242X%\004F\030\344\277\331\371\266\200`\016\367?\034\214\273\330\347&\334\277\317\026\210\212\246\004\340?\263%\216\235N\325\344?\306\036\n\002\2458\333?\354\324c\377\033\344\342\2776\353\354\033\030\035\352\277\330u2\274\353\355\324\277G\036\013\224\372l\342?\200\315\340\365\307{\340\277\366;\027\272J\016\354?\036\307[\310\310\252\357?\001\353\260m\270=\362?\213\232I\217\3208\341?\260\2048\317\223\276\331\277TF]#Iy\362\277\260\2048\317\223\276\331\277\200g+\027\356\350\350\277\200\315\340\365\307{\340\277\354\324c\377\033\344\342\277\024\372\362.\300\355\356\277\021\277R?\337i\313\277\200g+\027\356\350\350\277\312\343i\022\304\264\347\277\022\246\243\001\267\264\232\277an\257\262\227\205\322\277\365f,\251C\035\320\277#)Pk\243\243\361?\347\330$;\033~\370\2774\007u\346}N\260\277\024\372\362.\300\355\356\277\262\277\330\276tB\355?\267\273\027\203u\250\367?\265\243^\027\345*\251?\265\243^\027\345*\251?v\010\201\345\250\377\323?=\363\365\244\001^\316?\354\324c\377\033\344\342\277Q\310=\301HF\005\300\022\246\243\001\267\264\232\277\356\017\004\357\374g\326?KN\337\232G\255\375?#)Pk\243\243\361?\225}x\205\212B\370?1\242\010G\204\200\373\277m\3623w\014\246\364?\001\353\260m\270=\362?\356\017\004\357\374g\326?\236\017A/\262{\365\277\215\325\351~\261\274\304?\260\2048\317\223\276\331\277m\3623w\014\246\364?b\241F\031\217\310\301\277\260\2048\317\223\276\331\277v\010\201\345\250\377\323?\260\2048\317\223\276\331\277v\010\201\345\250\377\323?Q\310=\301HF\005\300\354\324c\377\033\344\342\277\336\304{\363\363w\010@V\340\247Do\346\372\277\213\232I\217\3208\341?\213\232I\217\3208\341?6\353\354\033\030\035\352\277m\214~\2302\023\375?\024\372\362.\300\355\356\277\354\324c\377\033\344\342\277\213\232I\217\3208\341?\034\214\273\330\347&\334\277\300\000;\034\n\253\360\277\037-\021\247\242=\347?\357\026\246aV\364\003@"
      }
    }
  }
}
node {
  name: "normalize_element/component_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 313
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 313
          }
        }
        tensor_content: "\t\030\243K\257\325\324?\t\030\243K\257\325\324?C\323\366y\036G\353\277C\323\366y\036G\353\277\t\030\243K\257\325\324?C\323\366y\036G\353\277C\323\366y\036G\353\277\246\365\314\342f\016\370?\t\030\243K\257\325\324?\t\030\243K\257\325\324?\t\030\243K\257\325\324?\246\365\314\342f\016\370?\246\365\314\342f\016\370?C\323\366y\036G\353\277\246\365\314\342f\016\370?\t\030\243K\257\325\324?\t\030\243K\257\325\324?C\323\366y\036G\353\277\246\365\314\342f\016\370?C\323\366y\036G\353\277\246\365\314\342f\016\370?\246\365\314\342f\016\370?C\323\366y\036G\353\277C\323\366y\036G\353\277C\323\366y\036G\353\277\246\365\314\342f\016\370?C\323\366y\036G\353\277\246\365\314\342f\016\370?\246\365\314\342f\016\370?C\323\366y\036G\353\277\246\365\314\342f\016\370?\246\365\314\342f\016\370?\246\365\314\342f\016\370?C\323\366y\036G\353\277C\323\366y\036G\353\277C\323\366y\036G\353\277C\323\366y\036G\353\277C\323\366y\036G\353\277C\323\366y\036G\353\277\t\030\243K\257\325\324?\t\030\243K\257\325\324?C\323\366y\036G\353\277\t\030\243K\257\325\324?C\323\366y\036G\353\277?G%\324F\334\320\277\246\365\314\342f\016\370?C\323\366y\036G\353\277C\323\366y\036G\353\277\t\030\243K\257\325\324?s\201\355\304\014\020\367\277C\323\366y\036G\353\277C\323\366y\036G\353\277\246\365\314\342f\016\370?\t\030\243K\257\325\324?\t\030\243K\257\325\324?\246\365\314\342f\016\370?\246\365\314\342f\016\370?C\323\366y\036G\353\277C\323\366y\036G\353\277C\323\366y\036G\353\277C\323\366y\036G\353\277\246\365\314\342f\016\370?\246\365\314\342f\016\370?\246\365\314\342f\016\370?C\323\366y\036G\353\277\246\365\314\342f\016\370?C\323\366y\036G\353\277C\323\366y\036G\353\277C\323\366y\036G\353\277C\323\366y\036G\353\277\246\365\314\342f\016\370?C\323\366y\036G\353\277C\323\366y\036G\353\277\246\365\314\342f\016\370?C\323\366y\036G\353\277C\323\366y\036G\353\277C\323\366y\036G\353\277\t\030\243K\257\325\324?C\323\366y\036G\353\277\246\365\314\342f\016\370?C\323\366y\036G\353\277\t\030\243K\257\325\324?s\201\355\304\014\020\367\277C\323\366y\036G\353\277\246\365\314\342f\016\370?C\323\366y\036G\353\277C\323\366y\036G\353\277C\323\366y\036G\353\277C\323\366y\036G\353\277\t\030\243K\257\325\324?\t\030\243K\257\325\324?\t\030\243K\257\325\324?C\323\366y\036G\353\277\t\030\243K\257\325\324?C\323\366y\036G\353\277C\323\366y\036G\353\277C\323\366y\036G\353\277\246\365\314\342f\016\370?\246\365\314\342f\016\370?\246\365\314\342f\016\370?\246\365\314\342f\016\370?C\323\366y\036G\353\277\t\030\243K\257\325\324?C\323\366y\036G\353\277\t\030\243K\257\325\324?\t\030\243K\257\325\324?\t\030\243K\257\325\324?C\323\366y\036G\353\277\246\365\314\342f\016\370?\246\365\314\342f\016\370?C\323\366y\036G\353\277\t\030\243K\257\325\324?C\323\366y\036G\353\277C\323\366y\036G\353\277C\323\366y\036G\353\277\246\365\314\342f\016\370?C\323\366y\036G\353\277\t\030\243K\257\325\324?C\323\366y\036G\353\277\t\030\243K\257\325\324?\t\030\243K\257\325\324?C\323\366y\036G\353\277\246\365\314\342f\016\370?C\323\366y\036G\353\277C\323\366y\036G\353\277C\323\366y\036G\353\277C\323\366y\036G\353\277C\323\366y\036G\353\277C\323\366y\036G\353\277\t\030\243K\257\325\324?\t\030\243K\257\325\324?C\323\366y\036G\353\277C\323\366y\036G\353\277C\323\366y\036G\353\277C\323\366y\036G\353\277\246\365\314\342f\016\370?C\323\366y\036G\353\277C\323\366y\036G\353\277\246\365\314\342f\016\370?\246\365\314\342f\016\370??G%\324F\334\320\277\246\365\314\342f\016\370?\t\030\243K\257\325\324?C\323\366y\036G\353\277C\323\366y\036G\353\277\246\365\314\342f\016\370?C\323\366y\036G\353\277\246\365\314\342f\016\370?\246\365\314\342f\016\370?\246\365\314\342f\016\370?\t\030\243K\257\325\324?\t\030\243K\257\325\324?C\323\366y\036G\353\277C\323\366y\036G\353\277\t\030\243K\257\325\324?\246\365\314\342f\016\370?\246\365\314\342f\016\370?C\323\366y\036G\353\277C\323\366y\036G\353\277C\323\366y\036G\353\277s\201\355\304\014\020\367\277C\323\366y\036G\353\277C\323\366y\036G\353\277\246\365\314\342f\016\370?C\323\366y\036G\353\277\246\365\314\342f\016\370?C\323\366y\036G\353\277\t\030\243K\257\325\324?C\323\366y\036G\353\277C\323\366y\036G\353\277\t\030\243K\257\325\324?C\323\366y\036G\353\277C\323\366y\036G\353\277\t\030\243K\257\325\324?C\323\366y\036G\353\277C\323\366y\036G\353\277\t\030\243K\257\325\324?C\323\366y\036G\353\277C\323\366y\036G\353\277C\323\366y\036G\353\277s\201\355\304\014\020\367\277\t\030\243K\257\325\324?\t\030\243K\257\325\324?\t\030\243K\257\325\324?\246\365\314\342f\016\370?C\323\366y\036G\353\277C\323\366y\036G\353\277\246\365\314\342f\016\370?\t\030\243K\257\325\324?C\323\366y\036G\353\277\246\365\314\342f\016\370?\246\365\314\342f\016\370?\246\365\314\342f\016\370?C\323\366y\036G\353\277C\323\366y\036G\353\277C\323\366y\036G\353\277C\323\366y\036G\353\277\t\030\243K\257\325\324?\246\365\314\342f\016\370?C\323\366y\036G\353\277\246\365\314\342f\016\370?C\323\366y\036G\353\277\246\365\314\342f\016\370?\246\365\314\342f\016\370?\246\365\314\342f\016\370?C\323\366y\036G\353\277\t\030\243K\257\325\324?C\323\366y\036G\353\277C\323\366y\036G\353\277C\323\366y\036G\353\277C\323\366y\036G\353\277\246\365\314\342f\016\370?\246\365\314\342f\016\370?\t\030\243K\257\325\324?\t\030\243K\257\325\324?C\323\366y\036G\353\277C\323\366y\036G\353\277\246\365\314\342f\016\370?C\323\366y\036G\353\277\246\365\314\342f\016\370?\t\030\243K\257\325\324?\246\365\314\342f\016\370?\t\030\243K\257\325\324?\t\030\243K\257\325\324?C\323\366y\036G\353\277C\323\366y\036G\353\277C\323\366y\036G\353\277\246\365\314\342f\016\370?C\323\366y\036G\353\277C\323\366y\036G\353\277\246\365\314\342f\016\370?C\323\366y\036G\353\277C\323\366y\036G\353\277?G%\324F\334\320\277\t\030\243K\257\325\324?C\323\366y\036G\353\277\t\030\243K\257\325\324?\t\030\243K\257\325\324?\t\030\243K\257\325\324?\t\030\243K\257\325\324?C\323\366y\036G\353\277C\323\366y\036G\353\277C\323\366y\036G\353\277C\323\366y\036G\353\277C\323\366y\036G\353\277\t\030\243K\257\325\324?\246\365\314\342f\016\370?\t\030\243K\257\325\324?C\323\366y\036G\353\277\t\030\243K\257\325\324?C\323\366y\036G\353\277C\323\366y\036G\353\277\t\030\243K\257\325\324?C\323\366y\036G\353\277C\323\366y\036G\353\277C\323\366y\036G\353\277C\323\366y\036G\353\277C\323\366y\036G\353\277\246\365\314\342f\016\370?C\323\366y\036G\353\277C\323\366y\036G\353\277\246\365\314\342f\016\370?C\323\366y\036G\353\277\246\365\314\342f\016\370?\t\030\243K\257\325\324?C\323\366y\036G\353\277C\323\366y\036G\353\277C\323\366y\036G\353\277\246\365\314\342f\016\370?\246\365\314\342f\016\370?\246\365\314\342f\016\370?\246\365\314\342f\016\370?C\323\366y\036G\353\277C\323\366y\036G\353\277C\323\366y\036G\353\277C\323\366y\036G\353\277\t\030\243K\257\325\324?C\323\366y\036G\353\277\246\365\314\342f\016\370?\246\365\314\342f\016\370?\t\030\243K\257\325\324?C\323\366y\036G\353\277C\323\366y\036G\353\277C\323\366y\036G\353\277C\323\366y\036G\353\277\246\365\314\342f\016\370?C\323\366y\036G\353\277C\323\366y\036G\353\277\t\030\243K\257\325\324?\246\365\314\342f\016\370?C\323\366y\036G\353\277C\323\366y\036G\353\277\t\030\243K\257\325\324?C\323\366y\036G\353\277C\323\366y\036G\353\277C\323\366y\036G\353\277\t\030\243K\257\325\324?C\323\366y\036G\353\277\246\365\314\342f\016\370?\t\030\243K\257\325\324?C\323\366y\036G\353\277\246\365\314\342f\016\370?C\323\366y\036G\353\277\t\030\243K\257\325\324?\246\365\314\342f\016\370?C\323\366y\036G\353\277\246\365\314\342f\016\370?\246\365\314\342f\016\370?\t\030\243K\257\325\324?C\323\366y\036G\353\277\246\365\314\342f\016\370?C\323\366y\036G\353\277C\323\366y\036G\353\277"
      }
    }
  }
}
node {
  name: "normalize_element/component_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 313
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 313
          }
        }
        tensor_content: "9\332d\001\324\361\343?e(\370\334\355\305\327?\023\362Z\2127\323\346\277Mt\264D\340\203\346\277\332,\253Q?\'\327?\240P\034\237Ty\353\277\005\301\251\206\267\244\355\277nEp\'Db\370?ft\215\354i\313\317\277(\217\277\250R\023\314\277\020\3540\324\031w\341?8*5*$E\363?nEp\'Db\370?\027X\344\356\264\210\335\277\315N\337Q\036\372\377?\020\3540\324\031w\341?e(\370\334\355\305\327?wb\350q\232\376\350\277\315N\337Q\036\372\377?\312>P\314\016\364\355\277\017<\001\375i\312\360?e{\335\340L\307\371?\346\240\262\323\016Q\340\277Mt\264D\340\203\346\277dnc6Lo\332\277\324\271\247B\301\031\361?\210\366\r\377\2104\346\277<\267\346\341G<\002@e{\335\340L\307\371?!\323;eg\256\360\277|v!+\304\220\361?nEp\'Db\370?\266\370z\345lA\361?\210\366\r\377\2104\346\277\210\366\r\377\2104\346\277\'\351\364\240\224\020\350\277T\213\002\331\030\304\361\277J\021@\273q|\342\277dnc6Lo\332\277\234G\335\r(o\323?\347\243\307\256\035\377\322\277\253\036Y\031f\240\340\277\377\240\213{\230\230\311\277\312>P\314\016\364\355\277_\364\0173\353e\272\277\017<\001\375i\312\360?z\026\302|d7\360\277Mt\264D\340\203\346\277\332,\253Q?\'\327?qL/6m\234\361\277\023\362Z\2127\323\346\277\026U\317\023\246\332\352\277\213\006\235\204\230:\370?\020\3540\324\031w\341?\332,\253Q?\'\327?\213\006\235\204\230:\370?\324\271\247B\301\031\361?i17n\032\320\357\277\023\362Z\2127\323\346\277\330o\001\320\216\"\347\277Q\327(\316N\213\352\277\266\370z\345lA\361?\315N\337Q\036\372\377?\303\325\261\214\202\220\344?z\026\302|d7\360\277\303\325\261\214\202\220\344?Mt\264D\340\203\346\277\330o\001\320\216\"\347\277\\U\225\037\020_\360\277\023\362Z\2127\323\346\277\301!\330\201\270W\375?\253\036Y\031f\240\340\277\005\301\251\206\267\244\355\277\213\006\235\204\230:\370?\253\036Y\031f\240\340\277i17n\032\320\357\277Mt\264D\340\203\346\277e(\370\334\355\305\327?!\323;eg\256\360\277\017<\001\375i\312\360?\004\022\017\010\023\326\360\277\234G\335\r(o\323?K\301o\222!)\363\277\312>P\314\016\364\355\277\213\006\235\204\230:\370?\240P\034\237Ty\353\277\330o\001\320\216\"\347\277\023\362Z\2127\323\346\277\004\022\017\010\023\326\360\277\020\3540\324\031w\341?\332,\253Q?\'\327?9\332d\001\324\361\343?\312>P\314\016\364\355\277\234G\335\r(o\323?\312>P\314\016\364\355\277\005\301\251\206\267\244\355\277i17n\032\320\357\277\032\221p\341w\026\003@8*5*$E\363?\315N\337Q\036\372\377?\213\006\235\204\230:\370?\312>P\314\016\364\355\277e(\370\334\355\305\327?\004\022\017\010\023\326\360\277\234G\335\r(o\323?\020\3540\324\031w\341?\332,\253Q?\'\327?\005\301\251\206\267\244\355\2778*5*$E\363?8*5*$E\363?\373G|\301\033;\362\2779\332d\001\324\361\343?dnc6Lo\332\277\312>P\314\016\364\355\277\240P\034\237Ty\353\2778*5*$E\363?\312>P\314\016\364\355\277\020\3540\324\031w\341?\253\036Y\031f\240\340\277\306\270\305\232\343\200\257?\020\3540\324\031w\341?\210\366\r\377\2104\346\277\315N\337Q\036\372\377?i17n\032\320\357\277<\340\216\267\361M\351\277i17n\032\320\357\277\227\327\356\331\270\017\360\277h\202\234\357u\001\363\277\227\327\356\331\270\017\360\277\234G\335\r(o\323?\234G\335\r(o\323?Q\327(\316N\213\352\277\'\351\364\240\224\020\350\277J\021@\273q|\342\277\205\223\231u\032-\342\277\213\006\235\204\230:\370?\260\204\342}\343U\327\277wb\350q\232\376\350\277\324\271\247B\301\031\361?\315N\337Q\036\372\377?\231\2123\214wj\343\277\275\350\240&\377?\004@\260\204\342}\343U\327\277\005\301\251\206\267\244\355\277\306\333\333B\240\354\351\277\017<\001\375i\312\360?\205\223\231u\032-\342\2778*5*$E\363?\017<\001\375i\312\360?\213\006\235\204\230:\370?\020\3540\324\031w\341?e(\370\334\355\305\327?dnc6Lo\332\277T\213\002\331\030\304\361\277\020\3540\324\031w\341?\213\006\235\204\230:\370?\275\350\240&\377?\004@\312>P\314\016\364\355\277\216\r\\\223\301t\361\277\330o\001\320\216\"\347\277K\301o\222!)\363\277\210\366\r\377\2104\346\277i17n\032\320\357\2778*5*$E\363?\205\223\231u\032-\342\277e{\335\340L\307\371?Mt\264D\340\203\346\277\027X\344\356\264\210\335\277\023\362Z\2127\323\346\277\217\274\366\021fC\356\277\306\270\305\232\343\200\257?dnc6Lo\332\277\026U\317\023\246\332\352\277\332,\253Q?\'\327?\005\301\251\206\267\244\355\277\312>P\314\016\364\355\277\234G\335\r(o\323?dnc6Lo\332\277\265G\266\265\261\266\354\277\311\217\265Mj%\361\277K\301o\222!)\363\277\020\3540\324\031w\341?e(\370\334\355\305\327?\027X\344\356\264\210\335\277\266\370z\345lA\361?J\021@\273q|\342\2776\312\325{\304\353\361\277nEp\'Db\370?\234G\335\r(o\323?\005\301\251\206\267\244\355\277\017<\001\375i\312\360?LI7U),\004@8*5*$E\363?\312>P\314\016\364\355\277\312>P\314\016\364\355\277z\026\302|d7\360\277dnc6Lo\332\277\234G\335\r(o\323?\213\006\235\204\230:\370?\253\036Y\031f\240\340\277<\267\346\341G<\002@i17n\032\320\357\2778*5*$E\363?\315N\337Q\036\372\377?8*5*$E\363?\023\362Z\2127\323\346\277N\321\376\0271/\345?\312>P\314\016\364\355\277\253\036Y\031f\240\340\277Mt\264D\340\203\346\277\240P\034\237Ty\353\277nEp\'Db\370?\315N\337Q\036\372\377?\306\270\305\232\343\200\257?\242S1zc\'\336\277T\213\002\331\030\304\361\277\253\036Y\031f\240\340\277\213\006\235\204\230:\370?Q\327(\316N\213\352\277\324\271\247B\301\031\361?\234G\335\r(o\323?(F?t\345\273\346?e(\370\334\355\305\327?\234G\335\r(o\323?\253\036Y\031f\240\340\277\253\036Y\031f\240\340\277\253\036Y\031f\240\340\277\303\325\261\214\202\220\344?\260\204\342}\343U\327\277\253\036Y\031f\240\340\2778*5*$E\363?\312>P\314\016\364\355\277\'\351\364\240\224\020\350\277Mt\264D\340\203\346\277 \000\366\345\372\225\245?\312>P\314\016\364\355\277s\334]@o\213\252?e(\370\334\355\305\327?\306\270\305\232\343\200\257?\020\3540\324\031w\341?,O~\005\022\306\336\277\330o\001\320\216\"\347\277\005\301\251\206\267\244\355\277T\213\002\331\030\304\361\277\005\301\251\206\267\244\355\277ft\215\354i\313\317\277e{\335\340L\307\371?\332,\253Q?\'\327?i17n\032\320\357\277\306\270\305\232\343\200\257?\227\327\356\331\270\017\360\277!\323;eg\256\360\277e(\370\334\355\305\327?\004\022\017\010\023\326\360\277\253\036Y\031f\240\340\277\227\327\356\331\270\017\360\277Mt\264D\340\203\346\277\023\362Z\2127\323\346\2778*5*$E\363?\240P\034\237Ty\353\277\'\351\364\240\224\020\350\277nEp\'Db\370?Mt\264D\340\203\346\277\213\006\235\204\230:\370?\347\243\307\256\035\377\322\277\026U\317\023\246\332\352\277\001^5\375H\235\351\277\240P\034\237Ty\353\277\324\271\247B\301\031\361?\324\271\247B\301\031\361?\266\370z\345lA\361?nEp\'Db\370?\206C\311L\312\331\362\277T\213\002\331\030\304\361\277Mt\264D\340\203\346\277_\010\332\321\316\271\343\277\262\320w\215_[\277\277<\340\216\267\361M\351\277\213\006\235\204\230:\370?\032\221p\341w\026\003@ \000\366\345\372\225\245?\312>P\314\016\364\355\277\312>P\314\016\364\355\277\005\301\251\206\267\244\355\277<\340\216\267\361M\351\277\213\006\235\204\230:\370?\312>P\314\016\364\355\277\023\362Z\2127\323\346\277\234G\335\r(o\323?\324\271\247B\301\031\361?\210\366\r\377\2104\346\277\260\204\342}\343U\327\2779\332d\001\324\361\343?Q\327(\316N\213\352\277\026U\317\023\246\332\352\277!\323;eg\256\360\277\020\3540\324\031w\341?\253\036Y\031f\240\340\277\363\331\236\365im\376?:\200/\t\222\364\327\277\227\327\356\331\270\017\360\277\315N\337Q\036\372\377?\347\377|)c\314\355\277\020\3540\324\031w\341?\017<\001\375i\312\360?\346\240\262\323\016Q\340\277\213\006\235\204\230:\370?8*5*$E\363?\020\3540\324\031w\341?\260\204\342}\343U\327\277\017<\001\375i\312\360?i17n\032\320\357\277\004\022\017\010\023\326\360\277"
      }
    }
  }
}
node {
  name: "normalize_element/component_3"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 313
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 313
          }
        }
        tensor_content: "$\312\235\244\317\030\304?\223M\260\232\036\025\330\277\307\3317\266!\327\350\277\273\261\216m\311\224\322?$\312\235\244\317\030\304?\026\316\333\3211\212\361\277\034\300\327\203R\033\355\277(U\203\026\245&\363?\227\001\347q\327\313\347?\345*\341\265\370E\310\277\t90?\337~\333\277\204\330\346\272X\237\356? g\223\206\034*\360?\265\2607\377\242\252\357\277\227R\023+\335\223\363?\001\321\302\220m\021\274\277\001\321\302\220m\021\274\277\323\001\341\376y\031\317\277\364u\3110PR\002@>\305\267Z\342@\354\277\375\020\207\366\206<\345?j\022#-W>\376?>\305\267Z\342@\354\277n?a\0218\334\304\277\374\007\030D0)\341\277\227R\023+\335\223\363?\036\r\370\032\300N\340\277\260k\t\2030\007\004@@\037S\306>\034\374?8\323\273\250\301\257\360\277\037i\231\227ht\004@\343J\303h\205\333\364?l_C\304\304q\361?r\363\227\350\360\222\344\277\t90?\337~\333\277\307\3317\266!\327\350\277@\301\2538J\254\363\277\323\001\341\376y\031\317\277\223M\260\232\036\025\330\277\001\321\302\220m\021\274\277t\374\006\233G\246\350?\t90?\337~\333\277\273\261\216m\311\224\322?r\242k/\353\312\370\277\014\344\367cA\"\347\277\204\330\346\272X\237\356?\205\313k\346i\367\361\277\351\336\027\215\261\374\347\277\273\261\216m\311\224\322?$\312\235\244\317\030\304?\t90?\337~\333\277\307\3317\266!\327\350\277l_C\304\304q\361?\t90?\337~\333\277$\312\235\244\317\030\304?l_C\304\304q\361?\227R\023+\335\223\363?\327\265\027\3262\320\356\277\345*\341\265\370E\310\277\034b0\366]\253\324\277\307\3317\266!\327\350\277l_C\304\304q\361?\227R\023+\335\223\363?\223M\260\232\036\025\330\277>\305\267Z\342@\354\277$\312\235\244\317\030\304?$\312\235\244\317\030\304?\001\321\302\220m\021\274\277\351\336\027\215\261\374\347\277\345*\341\265\370E\310\277@\037S\306>\034\374?.\351\327:\321G\346\277\331\0028m\240\003\342\277@\037S\306>\034\374?`\312\2271rf\353\277j\264{\237b\316\365\277\021\241\235\355P\354\312?\001\321\302\220m\021\274\2778\323\273\250\301\257\360\277\353\347\206?\010\020\354?8\323\273\250\301\257\360\277$\312\235\244\317\030\304?\001\321\302\220m\021\274\277.\351\327:\321G\346\277\301E\343\221\365\265\365?\034\300\327\203R\033\355\277\345*\341\265\370E\310\277\t90?\337~\333\277\034\300\327\203R\033\355\277\214\206\361pc@\230?$\312\235\244\317\030\304?\323\001\341\376y\031\317\277\307\3317\266!\327\350\277\223M\260\232\036\025\330\277\t90?\337~\333\2778\323\273\250\301\257\360\277\265\2607\377\242\252\357\277\336U\3211\215\247\007@\227R\023+\335\223\363?j\022#-W>\376?j\022#-W>\376?.\351\327:\321G\346\277\001\321\302\220m\021\274\277\034\300\327\203R\033\355\277\001\321\302\220m\021\274\277$\312\235\244\317\030\304?\214\206\361pc@\230?\311\325+\224\211B\360\277\227R\023+\335\223\363?l_C\304\304q\361?\331\261\013\264\232;\366\277d~\316\010+\035\333?\223M\260\232\036\025\330\277\034b0\366]\253\324\277\026\316\333\3211\212\361\277\227R\023+\335\223\363?\307\3317\266!\327\350\277`\312\2271rf\353\277\t90?\337~\333\277\036\r\370\032\300N\340\277\001\321\302\220m\021\274\277\\\026aZ\271\257\313\277@\037S\306>\034\374?\327\265\027\3262\320\356\277\t90?\337~\333\277\327\265\027\3262\320\356\277\307\3317\266!\327\350\2778\323\273\250\301\257\360\277>\305\267Z\342@\354\277\323\001\341\376y\031\317\277\001\321\302\220m\021\274\277\245v\260Q\235A\321\277\307\3317\266!\327\350\277\223M\260\232\036\025\330\277\374\007\030D0)\341\277\312\202\371\31170\000@\214\206\361pc@\230?\323\001\341\376y\031\317\277d~\316\010+\035\333?j\022#-W>\376?\3410\r\327\246[\236\277\010I\241\230\245\311\t@\333iN\255\353\206\336?b\306\213\017\332\321\362\277\305.p\221\2773\335\277\333\013\247\037\367\026\346?\374\007\030D0)\341\277\227R\023+\335\223\363?\247\335\306\221\350\304\355?\026,\203_&\372\371?n?a\0218\334\304\277\223M\260\232\036\025\330\277\223M\260\232\036\025\330\277\265\2607\377\242\252\357\277`\312\2271rf\353\277\227R\023+\335\223\363?\010I\241\230\245\311\t@\373\266\353\212*a\365\277b\306\213\017\332\321\362\277\345*\341\265\370E\310\277\345*\341\265\370E\310\277\200$\260\343\237\350\336\277\265\2607\377\242\252\357\2770\362F\355\'[\352?\374\007\030D0)\341\277\227R\023+\335\223\363?$\312\235\244\317\030\304?d~\316\010+\035\333?\245\324W\337\221\261\351\277\371\272\367\254\302\365\355\277\036\r\370\032\300N\340\277\223M\260\232\036\025\330\277`\312\2271rf\353\277\214\206\361pc@\230?\351\336\027\215\261\374\347\277.\351\327:\321G\346\277\214\206\361pc@\230?\223M\260\232\036\025\330\277\331\0028m\240\003\342\277\363\310\373\372\241d\362\277\223M\260\232\036\025\330\277$\312\235\244\317\030\304?\021\241\235\355P\354\312?\345*\341\265\370E\310\277\204\330\346\272X\237\356?\\\026aZ\271\257\313\277\331\261\013\264\232;\366\277\271W\363\001m\271\362?\036\r\370\032\300N\340\277\026\316\333\3211\212\361\277\204\330\346\272X\237\356?sO9e\231\270\010@\227R\023+\335\223\363?\265\2607\377\242\252\357\277.\351\327:\321G\346\277>\305\267Z\342@\354\277\t90?\337~\333\277\214\206\361pc@\230?\214\206\361pc@\230?`\312\2271rf\353\277\332^\331\351H)\006@\265\2607\377\242\252\357\277\227R\023+\335\223\363?\363&\243\210\226\324\372?\227R\023+\335\223\363?\305.p\221\2773\335\277\036\r\370\032\300N\340\277\t90?\337~\333\277\t90?\337~\333\277\021\241\235\355P\354\312?\307\3317\266!\327\350\277tM3TMn\364?j\022#-W>\376?\036\r\370\032\300N\340\277\351\336\027\215\261\374\347\277\265\2607\377\242\252\357\277NC\360\354\376\311\331\277\026,\203_&\372\371?\034\300\327\203R\033\355\277\227R\023+\335\223\363?\323\001\341\376y\031\317\277\207%\007R\306\322\341?\001\321\302\220m\021\274\277\001\321\302\220m\021\274\277\034b0\366]\253\324\277\223M\260\232\036\025\330\277`\312\2271rf\353\277$\312\235\244\317\030\304?\214\206\361pc@\230?\200$\260\343\237\350\336\277\204\330\346\272X\237\356?\307\3317\266!\327\350\277\225\370w\277\200\270\343\277\265\2607\377\242\252\357\277\323\001\341\376y\031\317\277b\306\213\017\332\321\362\277\223M\260\232\036\025\330\277\223M\260\232\036\025\330\277\036\r\370\032\300N\340\277.\351\327:\321G\346\277\\\026aZ\271\257\313\277\267\375W\226\020\336\342\277r\363\227\350\360\222\344\277@\301\2538J\254\363\277\034\300\327\203R\033\355\277d~\316\010+\035\333?\336U\3211\215\247\007@\026,\203_&\372\371?\371\272\367\254\302\365\355\277\t90?\337~\333\277\034\300\327\203R\033\355\2778\323\273\250\301\257\360\277\223M\260\232\036\025\330\277\034\300\327\203R\033\355\277\331\0028m\240\003\342\277\307\3317\266!\327\350\277\210\214\035\222\021V\316?\t90?\337~\333\277\227R\023+\335\223\363?\245\324W\337\221\261\351\277\223M\260\232\036\025\330\277\016>\223\317\235\375\366?r\363\227\350\360\222\344\277\3538\263\370\r\330\367?\207%\007R\306\322\341?\200$\260\343\237\350\336\277r\363\227\350\360\222\344\277\034\300\327\203R\033\355\277\033r\241O$\366\002@\227R\023+\335\223\363?\333\013\247\037\367\026\346?\343J\303h\205\333\364?\371\272\367\254\302\365\355\277\034\300\327\203R\033\355\277\273\261\216m\311\224\322?LF\206\375\325\324\254\277$\312\235\244\317\030\304?\036\r\370\032\300N\340\277l_C\304\304q\361?\336U\3211\215\247\007@\323\001\341\376y\031\317\277\t90?\337~\333\277r\242k/\353\312\370\277\327\265\027\3262\320\356\277\t90?\337~\333\277\312\202\371\31170\000@\t90?\337~\333\277P\356\267\021am\345\277\214\206\361pc@\230?\227R\023+\335\223\363?\200$\260\343\237\350\336\277\034b0\366]\253\324\277$\312\235\244\317\030\304?\307\3317\266!\327\350\277\223M\260\232\036\025\330\277\247\320K\275\371\034\361\277\t90?\337~\333\277\034b0\366]\253\324\277\364u\3110PR\002@~\017<n\033\267\263?\225\247K\006{\360\367\277\312\202\371\31170\000@r\363\227\350\360\222\344\277\001\321\302\220m\021\274\277\375\020\207\366\206<\345?r\363\227\350\360\222\344\277l_C\304\304q\361?\227R\023+\335\223\363?\001\321\302\220m\021\274\277\034b0\366]\253\324\277\247\335\306\221\350\304\355?j\264{\237b\316\365\277\331\261\013\264\232;\366\277"
      }
    }
  }
}
node {
  name: "normalize_element/component_4"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 313
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 313
          }
        }
        tensor_content: "J\000\000\000\000\000\000\000K\000\000\000\000\000\000\000P\000\000\000\000\000\000\000K\000\000\000\000\000\000\000K\000\000\000\000\000\000\000Q\000\000\000\000\000\000\000P\000\000\000\000\000\000\000M\000\000\000\000\000\000\000P\000\000\000\000\000\000\000K\000\000\000\000\000\000\000I\000\000\000\000\000\000\000N\000\000\000\000\000\000\000O\000\000\000\000\000\000\000P\000\000\000\000\000\000\000I\000\000\000\000\000\000\000I\000\000\000\000\000\000\000G\000\000\000\000\000\000\000F\000\000\000\000\000\000\000M\000\000\000\000\000\000\000L\000\000\000\000\000\000\000K\000\000\000\000\000\000\000I\000\000\000\000\000\000\000O\000\000\000\000\000\000\000K\000\000\000\000\000\000\000Q\000\000\000\000\000\000\000H\000\000\000\000\000\000\000I\000\000\000\000\000\000\000F\000\000\000\000\000\000\000I\000\000\000\000\000\000\000O\000\000\000\000\000\000\000F\000\000\000\000\000\000\000G\000\000\000\000\000\000\000M\000\000\000\000\000\000\000J\000\000\000\000\000\000\000P\000\000\000\000\000\000\000J\000\000\000\000\000\000\000M\000\000\000\000\000\000\000N\000\000\000\000\000\000\000O\000\000\000\000\000\000\000N\000\000\000\000\000\000\000N\000\000\000\000\000\000\000N\000\000\000\000\000\000\000O\000\000\000\000\000\000\000I\000\000\000\000\000\000\000O\000\000\000\000\000\000\000J\000\000\000\000\000\000\000Q\000\000\000\000\000\000\000H\000\000\000\000\000\000\000O\000\000\000\000\000\000\000M\000\000\000\000\000\000\000L\000\000\000\000\000\000\000R\000\000\000\000\000\000\000L\000\000\000\000\000\000\000G\000\000\000\000\000\000\000Q\000\000\000\000\000\000\000I\000\000\000\000\000\000\000J\000\000\000\000\000\000\000R\000\000\000\000\000\000\000H\000\000\000\000\000\000\000P\000\000\000\000\000\000\000Q\000\000\000\000\000\000\000N\000\000\000\000\000\000\000I\000\000\000\000\000\000\000O\000\000\000\000\000\000\000O\000\000\000\000\000\000\000M\000\000\000\000\000\000\000I\000\000\000\000\000\000\000Q\000\000\000\000\000\000\000G\000\000\000\000\000\000\000J\000\000\000\000\000\000\000F\000\000\000\000\000\000\000K\000\000\000\000\000\000\000J\000\000\000\000\000\000\000M\000\000\000\000\000\000\000G\000\000\000\000\000\000\000L\000\000\000\000\000\000\000I\000\000\000\000\000\000\000K\000\000\000\000\000\000\000P\000\000\000\000\000\000\000I\000\000\000\000\000\000\000P\000\000\000\000\000\000\000O\000\000\000\000\000\000\000P\000\000\000\000\000\000\000M\000\000\000\000\000\000\000O\000\000\000\000\000\000\000O\000\000\000\000\000\000\000N\000\000\000\000\000\000\000K\000\000\000\000\000\000\000M\000\000\000\000\000\000\000K\000\000\000\000\000\000\000K\000\000\000\000\000\000\000L\000\000\000\000\000\000\000M\000\000\000\000\000\000\000P\000\000\000\000\000\000\000G\000\000\000\000\000\000\000Q\000\000\000\000\000\000\000P\000\000\000\000\000\000\000I\000\000\000\000\000\000\000L\000\000\000\000\000\000\000G\000\000\000\000\000\000\000I\000\000\000\000\000\000\000P\000\000\000\000\000\000\000I\000\000\000\000\000\000\000L\000\000\000\000\000\000\000L\000\000\000\000\000\000\000M\000\000\000\000\000\000\000N\000\000\000\000\000\000\000N\000\000\000\000\000\000\000H\000\000\000\000\000\000\000M\000\000\000\000\000\000\000J\000\000\000\000\000\000\000N\000\000\000\000\000\000\000R\000\000\000\000\000\000\000H\000\000\000\000\000\000\000R\000\000\000\000\000\000\000I\000\000\000\000\000\000\000L\000\000\000\000\000\000\000K\000\000\000\000\000\000\000P\000\000\000\000\000\000\000F\000\000\000\000\000\000\000G\000\000\000\000\000\000\000M\000\000\000\000\000\000\000G\000\000\000\000\000\000\000R\000\000\000\000\000\000\000R\000\000\000\000\000\000\000Q\000\000\000\000\000\000\000J\000\000\000\000\000\000\000G\000\000\000\000\000\000\000K\000\000\000\000\000\000\000K\000\000\000\000\000\000\000M\000\000\000\000\000\000\000I\000\000\000\000\000\000\000I\000\000\000\000\000\000\000P\000\000\000\000\000\000\000Q\000\000\000\000\000\000\000L\000\000\000\000\000\000\000P\000\000\000\000\000\000\000H\000\000\000\000\000\000\000L\000\000\000\000\000\000\000G\000\000\000\000\000\000\000N\000\000\000\000\000\000\000I\000\000\000\000\000\000\000I\000\000\000\000\000\000\000L\000\000\000\000\000\000\000F\000\000\000\000\000\000\000M\000\000\000\000\000\000\000Q\000\000\000\000\000\000\000G\000\000\000\000\000\000\000N\000\000\000\000\000\000\000F\000\000\000\000\000\000\000M\000\000\000\000\000\000\000L\000\000\000\000\000\000\000P\000\000\000\000\000\000\000J\000\000\000\000\000\000\000K\000\000\000\000\000\000\000J\000\000\000\000\000\000\000F\000\000\000\000\000\000\000H\000\000\000\000\000\000\000Q\000\000\000\000\000\000\000N\000\000\000\000\000\000\000H\000\000\000\000\000\000\000H\000\000\000\000\000\000\000R\000\000\000\000\000\000\000O\000\000\000\000\000\000\000R\000\000\000\000\000\000\000O\000\000\000\000\000\000\000M\000\000\000\000\000\000\000Q\000\000\000\000\000\000\000Q\000\000\000\000\000\000\000H\000\000\000\000\000\000\000N\000\000\000\000\000\000\000R\000\000\000\000\000\000\000P\000\000\000\000\000\000\000M\000\000\000\000\000\000\000P\000\000\000\000\000\000\000M\000\000\000\000\000\000\000J\000\000\000\000\000\000\000O\000\000\000\000\000\000\000L\000\000\000\000\000\000\000J\000\000\000\000\000\000\000I\000\000\000\000\000\000\000L\000\000\000\000\000\000\000R\000\000\000\000\000\000\000M\000\000\000\000\000\000\000L\000\000\000\000\000\000\000K\000\000\000\000\000\000\000N\000\000\000\000\000\000\000K\000\000\000\000\000\000\000Q\000\000\000\000\000\000\000M\000\000\000\000\000\000\000F\000\000\000\000\000\000\000F\000\000\000\000\000\000\000L\000\000\000\000\000\000\000M\000\000\000\000\000\000\000J\000\000\000\000\000\000\000N\000\000\000\000\000\000\000M\000\000\000\000\000\000\000G\000\000\000\000\000\000\000Q\000\000\000\000\000\000\000L\000\000\000\000\000\000\000H\000\000\000\000\000\000\000R\000\000\000\000\000\000\000K\000\000\000\000\000\000\000I\000\000\000\000\000\000\000L\000\000\000\000\000\000\000H\000\000\000\000\000\000\000R\000\000\000\000\000\000\000F\000\000\000\000\000\000\000O\000\000\000\000\000\000\000H\000\000\000\000\000\000\000N\000\000\000\000\000\000\000L\000\000\000\000\000\000\000H\000\000\000\000\000\000\000O\000\000\000\000\000\000\000Q\000\000\000\000\000\000\000J\000\000\000\000\000\000\000M\000\000\000\000\000\000\000G\000\000\000\000\000\000\000R\000\000\000\000\000\000\000H\000\000\000\000\000\000\000K\000\000\000\000\000\000\000O\000\000\000\000\000\000\000J\000\000\000\000\000\000\000L\000\000\000\000\000\000\000L\000\000\000\000\000\000\000G\000\000\000\000\000\000\000I\000\000\000\000\000\000\000N\000\000\000\000\000\000\000N\000\000\000\000\000\000\000R\000\000\000\000\000\000\000N\000\000\000\000\000\000\000K\000\000\000\000\000\000\000L\000\000\000\000\000\000\000P\000\000\000\000\000\000\000I\000\000\000\000\000\000\000G\000\000\000\000\000\000\000F\000\000\000\000\000\000\000N\000\000\000\000\000\000\000N\000\000\000\000\000\000\000L\000\000\000\000\000\000\000R\000\000\000\000\000\000\000R\000\000\000\000\000\000\000O\000\000\000\000\000\000\000Q\000\000\000\000\000\000\000R\000\000\000\000\000\000\000L\000\000\000\000\000\000\000F\000\000\000\000\000\000\000N\000\000\000\000\000\000\000O\000\000\000\000\000\000\000Q\000\000\000\000\000\000\000L\000\000\000\000\000\000\000P\000\000\000\000\000\000\000O\000\000\000\000\000\000\000N\000\000\000\000\000\000\000K\000\000\000\000\000\000\000J\000\000\000\000\000\000\000F\000\000\000\000\000\000\000R\000\000\000\000\000\000\000J\000\000\000\000\000\000\000Q\000\000\000\000\000\000\000G\000\000\000\000\000\000\000I\000\000\000\000\000\000\000O\000\000\000\000\000\000\000H\000\000\000\000\000\000\000N\000\000\000\000\000\000\000L\000\000\000\000\000\000\000M\000\000\000\000\000\000\000O\000\000\000\000\000\000\000F\000\000\000\000\000\000\000I\000\000\000\000\000\000\000O\000\000\000\000\000\000\000H\000\000\000\000\000\000\000G\000\000\000\000\000\000\000G\000\000\000\000\000\000\000N\000\000\000\000\000\000\000L\000\000\000\000\000\000\000R\000\000\000\000\000\000\000R\000\000\000\000\000\000\000K\000\000\000\000\000\000\000F\000\000\000\000\000\000\000F\000\000\000\000\000\000\000H\000\000\000\000\000\000\000F\000\000\000\000\000\000\000M\000\000\000\000\000\000\000R\000\000\000\000\000\000\000I\000\000\000\000\000\000\000I\000\000\000\000\000\000\000R\000\000\000\000\000\000\000I\000\000\000\000\000\000\000F\000\000\000\000\000\000\000H\000\000\000\000\000\000\000R\000\000\000\000\000\000\000K\000\000\000\000\000\000\000P\000\000\000\000\000\000\000F\000\000\000\000\000\000\000Q\000\000\000\000\000\000\000G\000\000\000\000\000\000\000R\000\000\000\000\000\000\000F\000\000\000\000\000\000\000I\000\000\000\000\000\000\000P\000\000\000\000\000\000\000M\000\000\000\000\000\000\000H\000\000\000\000\000\000\000J\000\000\000\000\000\000\000O\000\000\000\000\000\000\000Q\000\000\000\000\000\000\000I\000\000\000\000\000\000\000H\000\000\000\000\000\000\000J\000\000\000\000\000\000\000Q\000\000\000\000\000\000\000N\000\000\000\000\000\000\000K\000\000\000\000\000\000\000L\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "normalize_element/component_5"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 313
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 313
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "normalize_element/component_6"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 313
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 313
          }
        }
        tensor_content: "\031\236\3318\307\326\350?r\361\254\351\335r\321?O\247\335\017\013\342\340\277_Z\250#\367\343\327\277\354\366\357\214\275\256\361?!<\256%Jf\355\277\237\177\350\354\227\204\360\277\222:\272\203\265\337\371?\202\314\2474T`\266\2777\236G\263a(R?\355\'\017\3118:\247?\257\365}\034\021\310\354?\004{f\001\366~\364?\016Y\334\270.o\324?\241\367\276B\275W\374?]hg\005\354\223\326?\276\367\026\333\025\271\332\277Z:_\001\334c\347\277\306=\t\346\266\256\371?\026\241\315\030\357)\366\277\366\264\270\355\203w\314?\342x\227\rc\t\360?\355K\211\340\237\256\317?\355\377\340kCQ\247\277\240\2226\317|\245\332\277\273{f\240?e\361?\004y\213qd\303\351\277?\322\212\025\033\375\371?\276\272\341\366\242\372\377?(\321n\333\003K\363\277\010Gv=\226\250\372?\371ZP*\350h\366?`L\305|t*\361?/\240?\254\276]\344\277\312\362E\t\231}\342\277\314\034\230\355\2056\354\277\026\241\315\030\357)\366\277g\37420\235\352\341\277{\343\272\274\333X\340\277*\271Q\211e\033\341?\373\305\215\022kW\340?\225\377\264\335\253#\324\277\362\345<\313\240\253\325\277%I\251e\200\305\363\277\022y%\333I\357\344?V\022\267\3036)\366?1i\277<\216\333\361\277\244\306\363G\317\021\342\277v_z}1\r\324?\225\377\264\335\253#\324\277k?d\246#\367\325?\2705\020aG\310\355\277L\224^D\334\203\364?3\343p\"Ej\330?\307\302>\260i\210\340?\330>\211T%\010\365?\304\206\"\034\215a\370?.\341\371\306\nV\362\277o\303\244\345\315B\342\277\261\3732\221S\004\345\277\247\222\003\204o;\350\277^\274\240\353f\352\340?\320\314\245X\223E\003@\222\277\357Mh\271\340?\"\301\343\357\374?\364\277\262\0227\223[\234\364?\254\262L\246\212\273\330\277\375x\276\274q-\334\277\377\3555P\020\222\361\277\361\036\230\312b\351\342\277\205\375\033\037\2472\346?\265\216\347\3151\360\335\277\345q\355\r\030?\355\277\014q\371\n\315\236\366?:\036\230+\031\003\346\277y\227\340\361\352\274\366\277.\024\365\377a\236\301\277\236z\241v\303&\265\277\333x\312Xps\362\277\252K\305\335*D\364?k|\231\212\226\265\360\277\r\314G\323\361\332\334?\204\277U\344\202\215\345\277\033,#:C[\356\277\217\262\364\r2Z\372?\2042\301\376E\371\355\277\347\265h\275~ \346\277*)v\357\275\357\237\277\213\307\201\264\377\335\363\277`s\207\265\2207\342?y\004\244\273\' \261?Q\325\345\023\033\022\320?-\\\304\374W|\353\277\211\027\260\314\177v\336?\323\2027O\231S\360\277\341\245\335\321w\025\347\277\031)\223\216r\257\365\2771\335\260\023\277\303\000@\t\3513\225I\031\367?\241\367\276B\275W\374?\340\005\373\tV`\365?:\221\003F\334n\356\277\332|sT\327\266\315\277\366U\345\356\205\001\363\277\013\242\365\356\004\"\323?{\177\303\237L\215\344?\336u\326xH \345?\023\031\010\243k\244\366\277\251z\3461\321\013\366?\017\371\276\200P$\366?I\002_#=\210\371\277\373\305\215\022kW\340?33\321\220YA\244\277Q\321/\364\367\232\352\2779\001\020\236\030l\360\277,\215\300\340\217\377\367?\255\025\372\2119\262\357\277H\0362\225\376.\341?\265\177s\320\375O\301\277L\210I\t/R\336\277\326\374\3504P\342\326?\233r\355\254a%\352\277;h\005\204\261\336\000@\216OG*\203c\363\277~\257\312\370{\202\346\277\\\324\275=\005\032\363\277\372\256\211\020c\277\360\277\240\3032\263\264(\367\277\250\247,\366\345\027\355\277\243\325gE\003\262\356?\3738\371,.\303\350?p\330\315WD\037\347\277\377})\370\323\224\357\277\245\215\230H\r\324\324\277a\354\247D\226\337\342\277&\254VI/\274\372?A\314*O\260\007\314\277\350\312\221/\365\374\352\277Le=\3605\274\362?M\334\360\014\343\243\004@*\031\223\206\321o\307\277b\207[T\343\324\002@\231D\345\250Q\365\312\277\245N\210\324\010Z\357\277A\365\307\027^\320\327\277cG\366\014\273\033\371?\026\251,4y\344\346\277\302\240\032\376\274L\365?\274\222j\242G\375\320?4\252\025#\203,\353?G|t=K\276\344?7\262\354D(6\277?\213\226\205\320\307Z\327\277\203\000\020\377\316\205\363\277]\004p\350\\\310\312?)\026?^\216k\000@\260Fnt\214\204\277?S\210\026\276!\350\353\277B\014\314\031fh\367\277\233r\355\254a%\352\277\326\205\307\372i\377\350\277\373\017\\d\200\372\354\277\221\327\014\240\006\351\362\277f\\Ph{5\360?y\237?\ruw\347\277&9\353.lP\362?\303e\344niS\335\277\0163\210~\200@\260\277\240\2226\317|\245\332\277\253^\023\300\017e\356\277 \377T|I\236\272?\317\022\217+\264\375\322\2773lO\350^\207\352\277^\274\240\353f\352\340?\352 \246\245\001\017\360\277\361EZ\003\177\366\363\277z\335\005H\231\034\350?}\277\210/\220\367\327\277f\315\340\362\254\345\355\277T\rL\210\324\301\362\277\201\032\010\341\376p\360\277^/\014\006*V\351?\373%\317\017\327\253\306\277\265\362\336\352\300\273\311\277\006an\037\306\223\367?\265\033|\263n\204\325\277\\\324\275=\005\032\363\277J\003\345\337\252\004\000@\273\242(\331[r\342?\351O\307\371\247\326\361\277\311y%z\223\325\341?\341\032$|\314<\372?&9\353.lP\362?\\\324\275=\005\032\363\277\233r\355\254a%\352\277\366U\345\356\205\001\363\2778\031-\360\266\233\322\2772\200\303>\226s\341?\030\374\033\341\023f\354?s\034I\007\253\000\340\277\337\247\207x\277\223\377?\363\315\037y\002|\363\277\"S\262\'R\376\374?\230N\215q\246f\002@\336\350A\223\013\214\355?C~\254k6\365s\277A2\374\216\206\215\243?\323\2027O\231S\360\277\366e\307\352\'\200\274\277F\353\006\340\247\252\256\277\276E\233LN\323\354\277\006an\037\306\223\367?\214*/\230\256\324\372?x\312\264\036\325\367\200?\326\230\361\027\301\026\313?%I\251e\200\305\363\277r,\007>\277u\321\277Y\311\235\215`v\367?[O\210sR@\354\277v\204a&\274^\352?\265\340!_\215\201\325?\001I\204\0305\316\347?\303\0046\340\331!\271\277\271^\255)\365\220\351?\022uo\273&x\337\277\274\216\264\202$\206\353\277$\200)\325\260G\346\277\245\305\251\016\357<\335?\240\037\313\264\2719\322\277\236\262\262<\245\217\315\277I\014\231\316X\376\364?\273\354\366*q\025\357\277V?\375\207K5\355\27733\321\220YA\244\277XG\261Q\2556\270\277\222\275\024\276\326\375\365\277\027p\3214\267\246\331\277S\214\314\335D_\321?\n\232C\3777#\226\277\254)n\340p\236\346?\025\271\352j\215Y\330\277\225\377\264\335\253#\324\277\356\275\224\215\373p\364\277\250\212\244h\345\200\367\2779\001\020\236\030l\360\277\232_\237\312|\004\360?\327\340\025\303\216;\377?\214\257dba\256\341?\323\2027O\231S\360\277f2E\241_\216\267?\307\221B\3141\005\364\277k|\231\212\226\265\360\277\323E\002k&\225\325?\231o]\001\221y\361\277\'\376\264\237\030W\332\2779\001\020\236\030l\360\277\202{\3324\034\254\354\277\341\030I\354:\201\357\277\254F\366mq5\374?\033,#:C[\356\277\3103\000$\345u\360\277e\376\334\326\344h\372?}\277\210/\220\367\327\277e-\376*\2130\374?\033\314\341<\327\006\310?\353\016\r\337[\336\343\277\255\025\372\2119\262\357\277x\022\253\'8\343\357\277F\267<\257e\274\000@v\204a&\274^\352?2Y\001\006zf\360?\374\342\025\240k\356\365?Z\220B\216\2368\372\277{\n}\365\367e\361\277o\277\356\305\252\313\314\277x\262i*\314\216\311?\355\377\340kCQ\247\277\267E\316\227[=\337\277\354\230|\373&\342\373?$\365o\177\005o\371?t\272P?;\372\306\2776yJ(\225\346\360\277K\244\034{\360\370\365\277\226\347\227\213\r\364\361\277,l\2023l\361\334\277\375\357\337\366W\020\352?Y\230\241\251(\363\352\277\317\205\372Ewi\333\277\236\311\222y\037\036\305?\327P\"\033\3138\341?~\257\312\370{\202\346\277\211R\n!ay\336\277\344\370\314~\022\227\354?-\\\304\374W|\353\277\355\305\363\250\205+\345\277\034\261X\004\3664\365\277\337\001!%\245\337\307?\344r7G\370\023\302\277\375U\262\243x\227\360?rz\213\257\367\217\343\277\n\211\026]k\316\350\277l\337FnE\254\367?\362\347\027[2g\360\2777Q>\266\230\004\333?\030\374\033\341\023f\354?\260rT\3139\347\322?\221\366o\275\230;\363?r\300\260\005\246\357\364?g\013\247-\321\212\356?f\177\\\201t\313\333\277o_\255\310>w\346?y\227\340\361\352\274\366\277b\344H)\014%\362\277"
      }
    }
  }
}
node {
  name: "normalize_element/component_7"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 313
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 313
          }
        }
        tensor_content: "\000\000\000\000\000\0000@\000\000\000\000\000\0003@\315\314\314\314\314L?@\000\000\000\000\000\0009@\000\000\000\000\000\0001@\232\231\231\231\231YA@\315\314\314\314\314\014@@\000\000\000\000\000\0000@\232\231\231\231\231Y@@\000\000\000\000\000\0002@\000\000\000\000\000\0002@ffffff3@\000\000\000\000\000\000/@\000\000\000\000\000\000>@\000\000\000\000\000\000*@\000\000\000\000\000\0000@\000\000\000\000\000\0003@\000\000\000\000\000\0008@\000\000\000\000\000\000/@\000\000\000\000\000\200=@\000\000\000\000\000\000*@\000\000\000\000\000\000*@333333;@\000\000\000\000\000\0006@\232\231\231\231\231\231:@\000\000\000\000\000\000.@\000\000\000\000\000\0003@\000\000\000\000\000\000.@\000\000\000\000\000\000*@\315\314\314\314\314\014A@\000\000\000\000\000\000$@\000\000\000\000\000\000,@\000\000\000\000\000\2001@\000\000\000\000\000\000:@\000\000\000\000\000\200A@\000\000\000\000\000\000:@\000\000\000\000\000\000B@\232\231\231\231\231\0315@\000\000\000\000\000\300@@\000\000\000\000\000\2004@3333330@\232\231\231\231\231\0319@\315\314\314\314\314\314:@\000\000\000\000\000\000:@ffffff9@\000\000\000\000\000\0000@\232\231\231\231\231\331B@\000\000\000\000\000\0006@\000\000\000\000\000\2005@\000\000\000\000\000\2005@\000\000\000\000\000\0003@\000\000\000\000\000\000B@\000\000\000\000\000\000*@\000\000\000\000\000\0003@ffffff6@\000\000\000\000\000\000.@\000\000\000\000\000\000,@\000\000\000\000\000\200B@\000\000\000\000\000\0007@\000\000\000\000\000\200B@333333@@3333333@\000\000\000\000\000\000&@fffff\3467@fffff\346?@\000\000\000\000\000\0001@\000\000\000\000\000\0008@33333s@@\000\000\000\000\000\000>@\000\000\000\000\000\0008@\000\000\000\000\000\000.@\000\000\000\000\000\0007@\000\000\000\000\000\000=@\000\000\000\000\000\000/@\000\000\000\000\000\0006@\000\000\000\000\000\200@@\000\000\000\000\000\0003@\000\000\000\000\000\0004@\232\231\231\231\231\231B@\000\000\000\000\000\000,@ffffffD@\232\231\231\231\231\2314@33333\2637@\000\000\000\000\000\200>@fffff\3460@\232\231\231\231\231\031A@fffff\3467@\000\000\000\000\000\0007@\000\000\000\000\000\300@@\000\000\000\000\000\0002@\000\000\000\000\000\0005@\000\000\000\000\000\2001@\000\000\000\000\000\000:@\232\231\231\231\231\0313@\000\000\000\000\000\000;@fffff\346=@\315\314\314\314\314LF@\000\000\000\000\000\000*@\000\000\000\000\000\0000@\000\000\000\000\000\000,@\000\000\000\000\000\000*@fffff&A@\000\000\000\000\000\0002@\000\000\000\000\000\000@@\000\000\000\000\000\0006@\000\000\000\000\000\2001@3333333@\315\314\314\314\314\014B@\000\000\000\000\000\000.@\000\000\000\000\000\000/@\000\000\000\000\000\000?@\232\231\231\231\231\0312@\000\000\000\000\000\000;@\000\000\000\000\000\000<@\000\000\000\000\000\000C@\000\000\000\000\000\000,@\000\000\000\000\000\000<@\000\000\000\000\000\000.@ffffff:@\000\000\000\000\000\0005@\000\000\000\000\000\0003@\000\000\000\000\000\2009@\000\000\000\000\000\000*@\000\000\000\000\000\000?@\000\000\000\000\000\000A@\315\314\314\314\314\014A@\000\000\000\000\000\0008@\000\000\000\000\000\000?@\000\000\000\000\000\0009@\000\000\000\000\000\0002@\000\000\000\000\000\0003@\000\000\000\000\000\0006@\000\000\000\000\000\0008@\315\314\314\314\314\314=@333333;@\000\000\000\000\000\2000@fffffffffff<@\000\000\000\000\000\000;@\000\000\000\000\000\000@@\000\000\000\000\000\0002@\000\000\000\000\000\2002@\000\000\000\000\000\0006@\000\000\000\000\000\0006@\000\000\000\000\000\2001@\000\000\000\000\000\0008@fffffffffff\346>@\000\000\000\000\000\000-@\000\000\000\000\000\000,@\315\314\314\314\314\3143@33333\263>@\000\000\000\000\000\000?@\000\000\000\000\000\2009@\000\000\000\000\000\000,@\000\000\000\000\000\000A@\000\000\000\000\000\0001@\000\000\000\000\000\0003@3333333@\000\000\000\000\000\0003@\000\000\000\000\000\0004@\000\000\000\000\000\0009@\000\000\000\000\000\000<@\000\000\000\000\000\0005@fffff\3463@3333337@\000\000\000\000\000\000;@\000\000\000\000\000\2001@\000\000\000\000\000\000=@\000\000\000\000\000\0009@333333B@\000\000\000\000\000\0007@\000\000\000\000\000\000;@\000\000\000\000\000\0005@ffffff3@3333334@\000\000\000\000\000\0002@\000\000\000\000\000\000@@\000\000\000\000\000\000?@\232\231\231\231\231\331A@\315\314\314\314\314\214C@\000\000\000\000\000\000B@\000\000\000\000\000\2000@\000\000\000\000\000\000$@33333\2631@fffff\246B@3333334@\000\000\000\000\000\000=@\315\314\314\314\314LG@3333334@33333\263C@\000\000\000\000\000\0007@\000\000\000\000\000\000<@\000\000\000\000\000\000:@\000\000\000\000\000\000B@\000\000\000\000\000\000,@\000\000\000\000\000\200@@\000\000\000\000\000\000<@\000\000\000\000\000\000*@ffffff
      }
    }
  }
}
node {
  name: "TensorSliceDataset"
  op: "TensorSliceDataset"
  input: "normalize_element/component_0"
  input: "normalize_element/component_1"
  input: "normalize_element/component_2"
  input: "normalize_element/component_3"
  input: "normalize_element/component_4"
  input: "normalize_element/component_5"
  input: "normalize_element/component_6"
  input: "normalize_element/component_7"
  device: "/device:CPU:0"
  attr {
    key: "Toutput_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
        type: DT_INT64
        type: DT_DOUBLE
        type: DT_DOUBLE
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "buffer_size"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 100
      }
    }
  }
}
node {
  name: "seed"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "seed2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "ShuffleDataset"
  op: "ShuffleDataset"
  input: "TensorSliceDataset"
  input: "buffer_size"
  input: "seed"
  input: "seed2"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
        type: DT_INT64
        type: DT_DOUBLE
        type: DT_DOUBLE
      }
    }
  }
  attr {
    key: "reshuffle_each_iteration"
    value {
      b: true
    }
  }
}
node {
  name: "count"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "RepeatDataset"
  op: "RepeatDataset"
  input: "ShuffleDataset"
  input: "count"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
        type: DT_INT64
        type: DT_DOUBLE
        type: DT_DOUBLE
      }
    }
  }
}
node {
  name: "batch_size"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 8
      }
    }
  }
}
node {
  name: "drop_remainder"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: false
      }
    }
  }
}
node {
  name: "BatchDatasetV2"
  op: "BatchDatasetV2"
  input: "RepeatDataset"
  input: "batch_size"
  input: "drop_remainder"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
        type: DT_INT64
        type: DT_DOUBLE
        type: DT_DOUBLE
      }
    }
  }
  attr {
    key: "parallel_copy"
    value {
      b: false
    }
  }
}
node {
  name: "optimizations"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 3
          }
        }
        string_val: "map_and_batch_fusion"
        string_val: "noop_elimination"
        string_val: "shuffle_and_repeat_fusion"
      }
    }
  }
}
node {
  name: "OptimizeDataset"
  op: "OptimizeDataset"
  input: "BatchDatasetV2"
  input: "optimizations"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "optimization_configs"
    value {
      list {
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
        type: DT_INT64
        type: DT_DOUBLE
        type: DT_DOUBLE
      }
    }
  }
}
node {
  name: "ModelDataset"
  op: "ModelDataset"
  input: "OptimizeDataset"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "algorithm"
    value {
      i: 0
    }
  }
  attr {
    key: "cpu_budget"
    value {
      i: 0
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
        type: DT_INT64
        type: DT_DOUBLE
        type: DT_DOUBLE
      }
    }
  }
}
node {
  name: "IteratorV2"
  op: "IteratorV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
        type: DT_INT64
        type: DT_DOUBLE
        type: DT_DOUBLE
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MakeIterator"
  op: "MakeIterator"
  input: "ModelDataset"
  input: "IteratorV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@IteratorV2"
      }
    }
  }
}
node {
  name: "IteratorToStringHandle"
  op: "IteratorToStringHandle"
  input: "IteratorV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "IteratorGetNext"
  op: "IteratorGetNext"
  input: "IteratorV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
        type: DT_INT64
        type: DT_DOUBLE
        type: DT_DOUBLE
      }
    }
  }
}
node {
  name: "boosted_trees"
  op: "BoostedTreesEnsembleResourceHandleOp"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "boosted_trees/"
    }
  }
}
node {
  name: "boosted_trees/BoostedTreesCreateEnsemble/stamp_token"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "boosted_trees/BoostedTreesCreateEnsemble/tree_ensemble_serialized"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "boosted_trees/BoostedTreesCreateEnsemble"
  op: "BoostedTreesCreateEnsemble"
  input: "boosted_trees"
  input: "boosted_trees/BoostedTreesCreateEnsemble/stamp_token"
  input: "boosted_trees/BoostedTreesCreateEnsemble/tree_ensemble_serialized"
}
node {
  name: "boosted_trees/IsBoostedTreesEnsembleInitialized"
  op: "IsBoostedTreesEnsembleInitialized"
  input: "boosted_trees"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "boosted_trees/BoostedTreesSerializeEnsemble"
  op: "BoostedTreesSerializeEnsemble"
  input: "boosted_trees"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "boosted_trees/QuantileAccumulator"
  op: "BoostedTreesQuantileStreamResourceHandleOp"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "boosted_trees/QuantileAccumulator/"
    }
  }
}
node {
  name: "boosted_trees/QuantileAccumulator/BoostedTreesCreateQuantileStreamResource/epsilon"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "boosted_trees/QuantileAccumulator/BoostedTreesCreateQuantileStreamResource/num_streams"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 5
      }
    }
  }
}
node {
  name: "boosted_trees/QuantileAccumulator/BoostedTreesCreateQuantileStreamResource"
  op: "BoostedTreesCreateQuantileStreamResource"
  input: "boosted_trees/QuantileAccumulator"
  input: "boosted_trees/QuantileAccumulator/BoostedTreesCreateQuantileStreamResource/epsilon"
  input: "boosted_trees/QuantileAccumulator/BoostedTreesCreateQuantileStreamResource/num_streams"
  attr {
    key: "max_elements"
    value {
      i: 1099511627776
    }
  }
}
node {
  name: "boosted_trees/QuantileAccumulator/IsBoostedTreesQuantileStreamResourceInitialized"
  op: "IsBoostedTreesQuantileStreamResourceInitialized"
  input: "boosted_trees/QuantileAccumulator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "boosted_trees/BoostedTreesQuantileStreamResourceGetBucketBoundaries"
  op: "BoostedTreesQuantileStreamResourceGetBucketBoundaries"
  input: "boosted_trees/QuantileAccumulator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "num_features"
    value {
      i: 5
    }
  }
}
node {
  name: "boosted_trees/BoostedTreesQuantileStreamResourceGetBucketBoundaries_1"
  op: "BoostedTreesQuantileStreamResourceGetBucketBoundaries"
  input: "boosted_trees/QuantileAccumulator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "num_features"
    value {
      i: 5
    }
  }
}
node {
  name: "boosted_trees/NoOp"
  op: "NoOp"
}
node {
  name: "boosted_trees/are_boundaries_ready/Initializer/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@boosted_trees/are_boundaries_ready"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: false
      }
    }
  }
}
node {
  name: "boosted_trees/are_boundaries_ready"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@boosted_trees/are_boundaries_ready"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "boosted_trees/are_boundaries_ready"
    }
  }
}
node {
  name: "boosted_trees/are_boundaries_ready/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "boosted_trees/are_boundaries_ready"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "boosted_trees/are_boundaries_ready/Assign"
  op: "AssignVariableOp"
  input: "boosted_trees/are_boundaries_ready"
  input: "boosted_trees/are_boundaries_ready/Initializer/initial_value"
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "boosted_trees/are_boundaries_ready/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "boosted_trees/are_boundaries_ready"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "boosted_trees/transform_features/Acceleration/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/Acceleration/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext"
  input: "boosted_trees/transform_features/Acceleration/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/Acceleration/Cast"
  op: "Cast"
  input: "boosted_trees/transform_features/Acceleration/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/Cylinders/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/Cylinders/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:1"
  input: "boosted_trees/transform_features/Cylinders/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/Cylinders/Cast"
  op: "Cast"
  input: "boosted_trees/transform_features/Cylinders/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/Displacement/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/Displacement/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:2"
  input: "boosted_trees/transform_features/Displacement/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/Displacement/Cast"
  op: "Cast"
  input: "boosted_trees/transform_features/Displacement/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/Horsepower/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/Horsepower/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:3"
  input: "boosted_trees/transform_features/Horsepower/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/Horsepower/Cast"
  op: "Cast"
  input: "boosted_trees/transform_features/Horsepower/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/ModelYear_bucketized/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/ModelYear_bucketized/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:4"
  input: "boosted_trees/transform_features/ModelYear_bucketized/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/ModelYear_bucketized/Cast"
  op: "Cast"
  input: "boosted_trees/transform_features/ModelYear_bucketized/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/ModelYear_bucketized/Bucketize"
  op: "Bucketize"
  input: "boosted_trees/transform_features/ModelYear_bucketized/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "boundaries"
    value {
      list {
        f: 73.0
        f: 76.0
        f: 79.0
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/Origin_indicator/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/Origin_indicator/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:5"
  input: "boosted_trees/transform_features/Origin_indicator/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/Origin_indicator/to_sparse_input/ignore_value/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/Origin_indicator/to_sparse_input/ignore_value"
  op: "Cast"
  input: "boosted_trees/transform_features/Origin_indicator/to_sparse_input/ignore_value/x"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/Origin_indicator/to_sparse_input/NotEqual"
  op: "NotEqual"
  input: "boosted_trees/transform_features/Origin_indicator/ExpandDims"
  input: "boosted_trees/transform_features/Origin_indicator/to_sparse_input/ignore_value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "incompatible_shape_error"
    value {
      b: true
    }
  }
}
node {
  name: "boosted_trees/transform_features/Origin_indicator/to_sparse_input/indices"
  op: "Where"
  input: "boosted_trees/transform_features/Origin_indicator/to_sparse_input/NotEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/Origin_indicator/to_sparse_input/values"
  op: "GatherNd"
  input: "boosted_trees/transform_features/Origin_indicator/ExpandDims"
  input: "boosted_trees/transform_features/Origin_indicator/to_sparse_input/indices"
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/Origin_indicator/to_sparse_input/dense_shape"
  op: "Shape"
  input: "boosted_trees/transform_features/Origin_indicator/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "boosted_trees/transform_features/Origin_indicator/Origin_lookup/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/Origin_indicator/Origin_lookup/Size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/Origin_indicator/Origin_lookup/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/Origin_indicator/Origin_lookup/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/Origin_indicator/Origin_lookup/range"
  op: "Range"
  input: "boosted_trees/transform_features/Origin_indicator/Origin_lookup/range/start"
  input: "boosted_trees/transform_features/Origin_indicator/Origin_lookup/Size"
  input: "boosted_trees/transform_features/Origin_indicator/Origin_lookup/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/Origin_indicator/Origin_lookup/Cast"
  op: "Cast"
  input: "boosted_trees/transform_features/Origin_indicator/Origin_lookup/range"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/Origin_indicator/Origin_lookup/hash_table/Cast"
  op: "Cast"
  input: "boosted_trees/transform_features/Origin_indicator/Origin_lookup/Const"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/Origin_indicator/Origin_lookup/hash_table/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/Origin_indicator/Origin_lookup/hash_table/hash_table"
  op: "HashTableV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "key_dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "hash_table_2326fadd-59e8-4fa3-969d-ccc4c2759fc6"
    }
  }
  attr {
    key: "use_node_name_sharing"
    value {
      b: false
    }
  }
  attr {
    key: "value_dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "boosted_trees/transform_features/Origin_indicator/Origin_lookup/hash_table/table_init/LookupTableImportV2"
  op: "LookupTableImportV2"
  input: "boosted_trees/transform_features/Origin_indicator/Origin_lookup/hash_table/hash_table"
  input: "boosted_trees/transform_features/Origin_indicator/Origin_lookup/hash_table/Cast"
  input: "boosted_trees/transform_features/Origin_indicator/Origin_lookup/Cast"
  attr {
    key: "Tin"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tout"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "boosted_trees/transform_features/Origin_indicator/hash_table_Lookup/LookupTableFindV2"
  op: "LookupTableFindV2"
  input: "boosted_trees/transform_features/Origin_indicator/Origin_lookup/hash_table/hash_table"
  input: "boosted_trees/transform_features/Origin_indicator/to_sparse_input/values"
  input: "boosted_trees/transform_features/Origin_indicator/Origin_lookup/hash_table/Const"
  attr {
    key: "Tin"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tout"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/Origin_indicator/SparseToDense/default_value"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/Origin_indicator/SparseToDense"
  op: "SparseToDense"
  input: "boosted_trees/transform_features/Origin_indicator/to_sparse_input/indices"
  input: "boosted_trees/transform_features/Origin_indicator/to_sparse_input/dense_shape"
  input: "boosted_trees/transform_features/Origin_indicator/hash_table_Lookup/LookupTableFindV2"
  input: "boosted_trees/transform_features/Origin_indicator/SparseToDense/default_value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "boosted_trees/transform_features/Origin_indicator/one_hot/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/Origin_indicator/one_hot/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/Origin_indicator/one_hot/depth"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/Origin_indicator/one_hot"
  op: "OneHot"
  input: "boosted_trees/transform_features/Origin_indicator/SparseToDense"
  input: "boosted_trees/transform_features/Origin_indicator/one_hot/depth"
  input: "boosted_trees/transform_features/Origin_indicator/one_hot/Const"
  input: "boosted_trees/transform_features/Origin_indicator/one_hot/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "TI"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: -1
    }
  }
}
node {
  name: "boosted_trees/transform_features/Origin_indicator/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -2
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/Origin_indicator/Sum"
  op: "Sum"
  input: "boosted_trees/transform_features/Origin_indicator/one_hot"
  input: "boosted_trees/transform_features/Origin_indicator/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "boosted_trees/transform_features/Weight/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/Weight/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:6"
  input: "boosted_trees/transform_features/Weight/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "boosted_trees/transform_features/Weight/Cast"
  op: "Cast"
  input: "boosted_trees/transform_features/Weight/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "boosted_trees/unstack"
  op: "Unpack"
  input: "boosted_trees/transform_features/Acceleration/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 1
    }
  }
  attr {
    key: "num"
    value {
      i: 1
    }
  }
}
node {
  name: "boosted_trees/BoostedTreesBucketize"
  op: "BoostedTreesBucketize"
  input: "boosted_trees/unstack"
  input: "boosted_trees/BoostedTreesQuantileStreamResourceGetBucketBoundaries_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "num_features"
    value {
      i: 1
    }
  }
}
node {
  name: "boosted_trees/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "boosted_trees/ExpandDims"
  op: "ExpandDims"
  input: "boosted_trees/BoostedTreesBucketize"
  input: "boosted_trees/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "boosted_trees/unstack_1"
  op: "Unpack"
  input: "boosted_trees/transform_features/Cylinders/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 1
    }
  }
  attr {
    key: "num"
    value {
      i: 1
    }
  }
}
node {
  name: "boosted_trees/BoostedTreesBucketize_1"
  op: "BoostedTreesBucketize"
  input: "boosted_trees/unstack_1"
  input: "boosted_trees/BoostedTreesQuantileStreamResourceGetBucketBoundaries_1:1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "num_features"
    value {
      i: 1
    }
  }
}
node {
  name: "boosted_trees/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "boosted_trees/ExpandDims_1"
  op: "ExpandDims"
  input: "boosted_trees/BoostedTreesBucketize_1"
  input: "boosted_trees/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "boosted_trees/unstack_2"
  op: "Unpack"
  input: "boosted_trees/transform_features/Displacement/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 1
    }
  }
  attr {
    key: "num"
    value {
      i: 1
    }
  }
}
node {
  name: "boosted_trees/BoostedTreesBucketize_2"
  op: "BoostedTreesBucketize"
  input: "boosted_trees/unstack_2"
  input: "boosted_trees/BoostedTreesQuantileStreamResourceGetBucketBoundaries_1:2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "num_features"
    value {
      i: 1
    }
  }
}
node {
  name: "boosted_trees/ExpandDims_2/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "boosted_trees/ExpandDims_2"
  op: "ExpandDims"
  input: "boosted_trees/BoostedTreesBucketize_2"
  input: "boosted_trees/ExpandDims_2/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "boosted_trees/unstack_3"
  op: "Unpack"
  input: "boosted_trees/transform_features/Horsepower/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 1
    }
  }
  attr {
    key: "num"
    value {
      i: 1
    }
  }
}
node {
  name: "boosted_trees/BoostedTreesBucketize_3"
  op: "BoostedTreesBucketize"
  input: "boosted_trees/unstack_3"
  input: "boosted_trees/BoostedTreesQuantileStreamResourceGetBucketBoundaries_1:3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "num_features"
    value {
      i: 1
    }
  }
}
node {
  name: "boosted_trees/ExpandDims_3/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "boosted_trees/ExpandDims_3"
  op: "ExpandDims"
  input: "boosted_trees/BoostedTreesBucketize_3"
  input: "boosted_trees/ExpandDims_3/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "boosted_trees/Cast"
  op: "Cast"
  input: "boosted_trees/transform_features/Origin_indicator/Sum"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "boosted_trees/unstack_4"
  op: "Unpack"
  input: "boosted_trees/Cast"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 1
    }
  }
  attr {
    key: "num"
    value {
      i: 3
    }
  }
}
node {
  name: "boosted_trees/ExpandDims_4/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "boosted_trees/ExpandDims_4"
  op: "ExpandDims"
  input: "boosted_trees/unstack_4"
  input: "boosted_trees/ExpandDims_4/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "boosted_trees/ExpandDims_5/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "boosted_trees/ExpandDims_5"
  op: "ExpandDims"
  input: "boosted_trees/unstack_4:1"
  input: "boosted_trees/ExpandDims_5/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "boosted_trees/ExpandDims_6/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "boosted_trees/ExpandDims_6"
  op: "ExpandDims"
  input: "boosted_trees/unstack_4:2"
  input: "boosted_trees/ExpandDims_6/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "boosted_trees/unstack_5"
  op: "Unpack"
  input: "boosted_trees/transform_features/Weight/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 1
    }
  }
  attr {
    key: "num"
    value {
      i: 1
    }
  }
}
node {
  name: "boosted_trees/BoostedTreesBucketize_4"
  op: "BoostedTreesBucketize"
  input: "boosted_trees/unstack_5"
  input: "boosted_trees/BoostedTreesQuantileStreamResourceGetBucketBoundaries_1:4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "num_features"
    value {
      i: 1
    }
  }
}
node {
  name: "boosted_trees/ExpandDims_7/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "boosted_trees/ExpandDims_7"
  op: "ExpandDims"
  input: "boosted_trees/BoostedTreesBucketize_4"
  input: "boosted_trees/ExpandDims_7/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "boosted_trees/Shape"
  op: "Shape"
  input: "IteratorGetNext:7"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "boosted_trees/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "boosted_trees/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "boosted_trees/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "boosted_trees/strided_slice"
  op: "StridedSlice"
  input: "boosted_trees/Shape"
  input: "boosted_trees/strided_slice/stack"
  input: "boosted_trees/strided_slice/stack_1"
  input: "boosted_trees/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "boosted_trees/zeros/Less/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1000
      }
    }
  }
}
node {
  name: "boosted_trees/zeros/Less"
  op: "Less"
  input: "boosted_trees/strided_slice"
  input: "boosted_trees/zeros/Less/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "boosted_trees/zeros/packed"
  op: "Pack"
  input: "boosted_trees/strided_slice"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "boosted_trees/zeros/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "boosted_trees/zeros"
  op: "Fill"
  input: "boosted_trees/zeros/packed"
  input: "boosted_trees/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "boosted_trees/ones/Less/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1000
      }
    }
  }
}
node {
  name: "boosted_trees/ones/Less"
  op: "Less"
  input: "boosted_trees/strided_slice"
  input: "boosted_trees/ones/Less/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "boosted_trees/ones/packed"
  op: "Pack"
  input: "boosted_trees/strided_slice"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "boosted_trees/ones/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "boosted_trees/ones"
  op: "Fill"
  input: "boosted_trees/ones/packed"
  input: "boosted_trees/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "boosted_trees/mul/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "boosted_trees/mul"
  op: "Mul"
  input: "boosted_trees/mul/x"
  input: "boosted_trees/ones"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "boosted_trees/zeros_1/mul/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "boosted_trees/zeros_1/mul"
  op: "Mul"
  input: "boosted_trees/strided_slice"
  input: "boosted_trees/zeros_1/mul/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "boosted_trees/zeros_1/Less/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1000
      }
    }
  }
}
node {
  name: "boosted_trees/zeros_1/Less"
  op: "Less"
  input: "boosted_trees/zeros_1/mul"
  input: "boosted_trees/zeros_1/Less/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "boosted_trees/zeros_1/packed/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "boosted_trees/zeros_1/packed"
  op: "Pack"
  input: "boosted_trees/strided_slice"
  input: "boosted_trees/zeros_1/packed/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "boosted_trees/zeros_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "boosted_trees/zeros_1"
  op: "Fill"
  input: "boosted_trees/zeros_1/packed"
  input: "boosted_trees/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "boosted_trees/NoOp_1"
  op: "NoOp"
}
node {
  name: "boosted_trees/BoostedTreesGetEnsembleStates"
  op: "BoostedTreesGetEnsembleStates"
  input: "boosted_trees"
  input: "^boosted_trees/NoOp_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "boosted_trees/stamp_token"
  op: "Identity"
  input: "boosted_trees/BoostedTreesGetEnsembleStates"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "boosted_trees/num_trees"
  op: "Identity"
  input: "boosted_trees/BoostedTreesGetEnsembleStates:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "boosted_trees/num_finalized_trees"
  op: "Identity"
  input: "boosted_trees/BoostedTreesGetEnsembleStates:2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "boosted_trees/num_attempted_layers"
  op: "Identity"
  input: "boosted_trees/BoostedTreesGetEnsembleStates:3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "boosted_trees/last_layer_nodes_range"
  op: "Identity"
  input: "boosted_trees/BoostedTreesGetEnsembleStates:4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "boosted_trees/BoostedTreesTrainingPredict"
  op: "BoostedTreesTrainingPredict"
  input: "boosted_trees"
  input: "boosted_trees/zeros"
  input: "boosted_trees/mul"
  input: "boosted_trees/ExpandDims"
  input: "boosted_trees/ExpandDims_1"
  input: "boosted_trees/ExpandDims_2"
  input: "boosted_trees/ExpandDims_3"
  input: "boosted_trees/transform_features/ModelYear_bucketized/Bucketize"
  input: "boosted_trees/ExpandDims_4"
  input: "boosted_trees/ExpandDims_5"
  input: "boosted_trees/ExpandDims_6"
  input: "boosted_trees/ExpandDims_7"
  input: "^boosted_trees/NoOp_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "logits_dimension"
    value {
      i: 1
    }
  }
  attr {
    key: "num_bucketized_features"
    value {
      i: 9
    }
  }
}
node {
  name: "boosted_trees/add"
  op: "AddV2"
  input: "boosted_trees/zeros_1"
  input: "boosted_trees/BoostedTreesTrainingPredict"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "boosted_trees/conditional_accumulator"
  op: "ResourceConditionalAccumulator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "reduction_type"
    value {
      s: "MEAN"
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 63
        }
        dim {
          size: 1
        }
        dim {
          size: 101
        }
        dim {
          size: 2
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "numeric_stats_summary_accumulator_0"
    }
  }
}
node {
  name: "boosted_trees/ResourceAccumulatorSetGlobalStep"
  op: "ResourceAccumulatorSetGlobalStep"
  input: "boosted_trees/conditional_accumulator"
  input: "boosted_trees/stamp_token"
}
node {
  name: "boosted_trees/conditional_accumulator_1"
  op: "ResourceConditionalAccumulator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "reduction_type"
    value {
      s: "MEAN"
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 63
        }
        dim {
          size: 1
        }
        dim {
          size: 3
        }
        dim {
          size: 2
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "numeric_stats_summary_accumulator_1"
    }
  }
}
node {
  name: "boosted_trees/ResourceAccumulatorSetGlobalStep_1"
  op: "ResourceAccumulatorSetGlobalStep"
  input: "boosted_trees/conditional_accumulator_1"
  input: "boosted_trees/stamp_token"
}
node {
  name: "boosted_trees/conditional_accumulator_2"
  op: "ResourceConditionalAccumulator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "reduction_type"
    value {
      s: "MEAN"
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 63
        }
        dim {
          size: 1
        }
        dim {
          size: 5
        }
        dim {
          size: 2
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "numeric_stats_summary_accumulator_2"
    }
  }
}
node {
  name: "boosted_trees/ResourceAccumulatorSetGlobalStep_2"
  op: "ResourceAccumulatorSetGlobalStep"
  input: "boosted_trees/conditional_accumulator_2"
  input: "boosted_trees/stamp_token"
}
node {
  name: "boosted_trees/ensemble/num_trees/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "boosted_trees/ensemble/num_trees"
      }
    }
  }
}
node {
  name: "boosted_trees/ensemble/num_trees"
  op: "ScalarSummary"
  input: "boosted_trees/ensemble/num_trees/tags"
  input: "boosted_trees/num_trees"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "boosted_trees/ensemble/num_finalized_trees/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "boosted_trees/ensemble/num_finalized_trees"
      }
    }
  }
}
node {
  name: "boosted_trees/ensemble/num_finalized_trees"
  op: "ScalarSummary"
  input: "boosted_trees/ensemble/num_finalized_trees/tags"
  input: "boosted_trees/num_finalized_trees"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "boosted_trees/ensemble/num_attempted_layers/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "boosted_trees/ensemble/num_attempted_layers"
      }
    }
  }
}
node {
  name: "boosted_trees/ensemble/num_attempted_layers"
  op: "ScalarSummary"
  input: "boosted_trees/ensemble/num_attempted_layers/tags"
  input: "boosted_trees/num_attempted_layers"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "boosted_trees/center_bias_needed/Initializer/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@boosted_trees/center_bias_needed"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: false
      }
    }
  }
}
node {
  name: "boosted_trees/center_bias_needed"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@boosted_trees/center_bias_needed"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "boosted_trees/center_bias_needed"
    }
  }
}
node {
  name: "boosted_trees/center_bias_needed/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "boosted_trees/center_bias_needed"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "boosted_trees/center_bias_needed/Assign"
  op: "AssignVariableOp"
  input: "boosted_trees/center_bias_needed"
  input: "boosted_trees/center_bias_needed/Initializer/initial_value"
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "boosted_trees/center_bias_needed/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "boosted_trees/center_bias_needed"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "boosted_trees/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "head/logits/Shape"
  op: "Shape"
  input: "boosted_trees/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/logits/assert_rank_at_least/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "head/logits/assert_rank_at_least/assert_type/statically_determined_correct_type"
  op: "NoOp"
}
node {
  name: "head/logits/assert_rank_at_least/static_checks_determined_all_ok"
  op: "NoOp"
}
node {
  name: "head/labels/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "head/labels/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:7"
  input: "head/labels/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/labels/Shape"
  op: "Shape"
  input: "head/labels/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/labels/Shape_1"
  op: "Shape"
  input: "boosted_trees/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/labels/assert_rank_at_least/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "head/labels/assert_rank_at_least/Shape"
  op: "Shape"
  input: "head/labels/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/labels/assert_rank_at_least/assert_type/statically_determined_correct_type"
  op: "NoOp"
}
node {
  name: "head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  op: "NoOp"
}
node {
  name: "head/labels/strided_slice/stack"
  op: "Const"
  input: "^head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/labels/strided_slice/stack_1"
  op: "Const"
  input: "^head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "head/labels/strided_slice/stack_2"
  op: "Const"
  input: "^head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/labels/strided_slice"
  op: "StridedSlice"
  input: "head/labels/Shape_1"
  input: "head/labels/strided_slice/stack"
  input: "head/labels/strided_slice/stack_1"
  input: "head/labels/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "head/labels/concat/values_1"
  op: "Const"
  input: "^head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/labels/concat/axis"
  op: "Const"
  input: "^head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/labels/concat"
  op: "ConcatV2"
  input: "head/labels/strided_slice"
  input: "head/labels/concat/values_1"
  input: "head/labels/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "head/labels/assert_equal_1/Equal"
  op: "Equal"
  input: "head/labels/concat"
  input: "head/labels/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "incompatible_shape_error"
    value {
      b: true
    }
  }
}
node {
  name: "head/labels/assert_equal_1/Const"
  op: "Const"
  input: "^head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/labels/assert_equal_1/All"
  op: "All"
  input: "head/labels/assert_equal_1/Equal"
  input: "head/labels/assert_equal_1/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/labels/assert_equal_1/Assert/Const"
  op: "Const"
  input: "^head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "labels shape must be [D0, D1, ... DN, 1]. Suggested Fix: check your n_classes argument to the estimator and/or the shape of your label."
      }
    }
  }
}
node {
  name: "head/labels/assert_equal_1/Assert/Const_1"
  op: "Const"
  input: "^head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "expected_labels_shape: "
      }
    }
  }
}
node {
  name: "head/labels/assert_equal_1/Assert/Const_2"
  op: "Const"
  input: "^head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "labels_shape: "
      }
    }
  }
}
node {
  name: "head/labels/assert_equal_1/Assert/Assert/data_0"
  op: "Const"
  input: "^head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "labels shape must be [D0, D1, ... DN, 1]. Suggested Fix: check your n_classes argument to the estimator and/or the shape of your label."
      }
    }
  }
}
node {
  name: "head/labels/assert_equal_1/Assert/Assert/data_1"
  op: "Const"
  input: "^head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "expected_labels_shape: "
      }
    }
  }
}
node {
  name: "head/labels/assert_equal_1/Assert/Assert/data_3"
  op: "Const"
  input: "^head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "labels_shape: "
      }
    }
  }
}
node {
  name: "head/labels/assert_equal_1/Assert/Assert"
  op: "Assert"
  input: "head/labels/assert_equal_1/All"
  input: "head/labels/assert_equal_1/Assert/Assert/data_0"
  input: "head/labels/assert_equal_1/Assert/Assert/data_1"
  input: "head/labels/concat"
  input: "head/labels/assert_equal_1/Assert/Assert/data_3"
  input: "head/labels/Shape"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "head/labels"
  op: "Identity"
  input: "head/labels/ExpandDims"
  input: "^head/labels/assert_equal_1/Assert/Assert"
  input: "^head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/Cast"
  op: "Cast"
  input: "head/labels"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/mean_squared_error/SquaredDifference"
  op: "SquaredDifference"
  input: "boosted_trees/add"
  input: "head/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/mean_squared_error/assert_broadcastable/weights"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "head/mean_squared_error/assert_broadcastable/weights/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "head/mean_squared_error/assert_broadcastable/weights/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/mean_squared_error/assert_broadcastable/values/shape"
  op: "Shape"
  input: "head/mean_squared_error/SquaredDifference"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/mean_squared_error/assert_broadcastable/values/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "head/mean_squared_error/assert_broadcastable/static_scalar_check_success"
  op: "NoOp"
}
node {
  name: "head/mean_squared_error/Cast/x"
  op: "Const"
  input: "^head/mean_squared_error/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "head/mean_squared_error/Mul"
  op: "Mul"
  input: "head/mean_squared_error/SquaredDifference"
  input: "head/mean_squared_error/Cast/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/weighted_loss/assert_broadcastable/weights"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "head/weighted_loss/assert_broadcastable/weights/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "head/weighted_loss/assert_broadcastable/weights/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/weighted_loss/assert_broadcastable/values/shape"
  op: "Shape"
  input: "head/mean_squared_error/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/weighted_loss/assert_broadcastable/values/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "head/weighted_loss/assert_broadcastable/static_scalar_check_success"
  op: "NoOp"
}
node {
  name: "head/weighted_loss/Cast/x"
  op: "Const"
  input: "^head/weighted_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "head/weighted_loss/Mul"
  op: "Mul"
  input: "head/mean_squared_error/Mul"
  input: "head/weighted_loss/Cast/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/weighted_loss/Const"
  op: "Const"
  input: "^head/weighted_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "head/weighted_loss/Sum"
  op: "Sum"
  input: "head/weighted_loss/Mul"
  input: "head/weighted_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/weighted_loss/num_elements"
  op: "Size"
  input: "head/mean_squared_error/Mul"
  input: "^head/weighted_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/weighted_loss/num_elements/Cast"
  op: "Cast"
  input: "head/weighted_loss/num_elements"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "head/weighted_loss/Const_1"
  op: "Const"
  input: "^head/weighted_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "head/weighted_loss/Sum_1"
  op: "Sum"
  input: "head/weighted_loss/Sum"
  input: "head/weighted_loss/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/weighted_loss/value"
  op: "DivNoNan"
  input: "head/weighted_loss/Sum_1"
  input: "head/weighted_loss/num_elements/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "head/cond/ReadVariableOp"
  op: "ReadVariableOp"
  input: "boosted_trees/are_boundaries_ready"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "head/cond"
  op: "If"
  input: "head/cond/ReadVariableOp"
  input: "head/weighted_loss/num_elements/Cast"
  input: "head/weighted_loss/Sum_1"
  input: "head/weighted_loss/Mul"
  input: "head/mean_squared_error/Mul"
  input: "head/weighted_loss/Cast/x"
  input: "head/mean_squared_error/SquaredDifference"
  input: "head/mean_squared_error/Cast/x"
  input: "boosted_trees/add"
  input: "head/Cast"
  input: "boosted_trees/BoostedTreesTrainingPredict:2"
  input: "boosted_trees/ExpandDims"
  input: "boosted_trees/ExpandDims_1"
  input: "boosted_trees/ExpandDims_2"
  input: "boosted_trees/ExpandDims_3"
  input: "boosted_trees/ExpandDims_7"
  input: "boosted_trees/ExpandDims_4"
  input: "boosted_trees/ExpandDims_5"
  input: "boosted_trees/ExpandDims_6"
  input: "boosted_trees/transform_features/ModelYear_bucketized/Bucketize"
  input: "boosted_trees/conditional_accumulator"
  input: "boosted_trees/stamp_token"
  input: "boosted_trees/conditional_accumulator_1"
  input: "boosted_trees/conditional_accumulator_2"
  input: "boosted_trees/last_layer_nodes_range"
  input: "boosted_trees"
  input: "global_step"
  input: "head/cond/ReadVariableOp"
  input: "IteratorGetNext"
  input: "IteratorGetNext:1"
  input: "IteratorGetNext:2"
  input: "IteratorGetNext:3"
  input: "IteratorGetNext:6"
  input: "boosted_trees/Const"
  input: "boosted_trees/QuantileAccumulator"
  input: "boosted_trees/are_boundaries_ready"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT32
        type: DT_INT32
        type: DT_INT32
        type: DT_INT32
        type: DT_INT32
        type: DT_INT32
        type: DT_INT32
        type: DT_INT32
        type: DT_INT32
        type: DT_INT32
        type: DT_RESOURCE
        type: DT_INT64
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_INT32
        type: DT_RESOURCE
        type: DT_RESOURCE
        type: DT_BOOL
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_FLOAT
        type: DT_RESOURCE
        type: DT_RESOURCE
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_BOOL
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "head_cond_false_286"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "head_cond_true_285"
      }
    }
  }
}
node {
  name: "head/cond/Identity"
  op: "Identity"
  input: "head/cond"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "loss/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "loss"
      }
    }
  }
}
node {
  name: "loss"
  op: "ScalarSummary"
  input: "loss/tags"
  input: "head/weighted_loss/value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^boosted_trees/ResourceAccumulatorSetGlobalStep"
  input: "^boosted_trees/ResourceAccumulatorSetGlobalStep_1"
  input: "^boosted_trees/ResourceAccumulatorSetGlobalStep_2"
}
node {
  name: "init"
  op: "NoOp"
  input: "^boosted_trees/are_boundaries_ready/Assign"
  input: "^boosted_trees/center_bias_needed/Assign"
  input: "^global_step/Assign"
}
node {
  name: "init_1"
  op: "NoOp"
  input: "^boosted_trees/BoostedTreesCreateEnsemble"
  input: "^boosted_trees/QuantileAccumulator/BoostedTreesCreateQuantileStreamResource"
}
node {
  name: "group_deps_1"
  op: "NoOp"
  input: "^init"
  input: "^init_1"
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "global_step"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_1"
  op: "VarIsInitializedOp"
  input: "boosted_trees/are_boundaries_ready"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_2"
  op: "VarIsInitializedOp"
  input: "boosted_trees/center_bias_needed"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/stack"
  op: "Pack"
  input: "report_uninitialized_variables/VarIsInitializedOp"
  input: "report_uninitialized_variables/VarIsInitializedOp_1"
  input: "report_uninitialized_variables/VarIsInitializedOp_2"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 3
          }
        }
        string_val: "global_step"
        string_val: "boosted_trees/are_boundaries_ready"
        string_val: "boosted_trees/center_bias_needed"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables/boolean_mask/strided_slice"
  input: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables/Const"
  input: "report_uninitialized_variables/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables/LogicalNot"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_variables/boolean_mask/Reshape"
  input: "report_uninitialized_variables/boolean_mask/Squeeze"
  input: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_resources/stack"
  op: "Pack"
  input: "boosted_trees/IsBoostedTreesEnsembleInitialized"
  input: "boosted_trees/QuantileAccumulator/IsBoostedTreesQuantileStreamResourceInitialized"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_resources/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_resources/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_resources/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 2
          }
        }
        string_val: "boosted_trees:0"
        string_val: "boosted_trees/QuantileAccumulator:0"
      }
    }
  }
}
node {
  name: "report_uninitialized_resources/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "report_uninitialized_resources/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_resources/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_resources/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_resources/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_resources/boolean_mask/Shape"
  input: "report_uninitialized_resources/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_resources/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_resources/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_resources/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_resources/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_resources/boolean_mask/strided_slice"
  input: "report_uninitialized_resources/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_resources/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "report_uninitialized_resources/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_resources/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_resources/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_resources/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_resources/boolean_mask/Shape_1"
  input: "report_uninitialized_resources/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_resources/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_resources/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_resources/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "report_uninitialized_resources/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_resources/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_resources/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_resources/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_resources/boolean_mask/Shape_2"
  input: "report_uninitialized_resources/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_resources/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_resources/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_resources/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_resources/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_resources/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_resources/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_resources/boolean_mask/strided_slice_1"
  input: "report_uninitialized_resources/boolean_mask/concat/values_1"
  input: "report_uninitialized_resources/boolean_mask/strided_slice_2"
  input: "report_uninitialized_resources/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_resources/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_resources/Const"
  input: "report_uninitialized_resources/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_resources/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_resources/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_resources/LogicalNot"
  input: "report_uninitialized_resources/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_resources/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_resources/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_resources/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_resources/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_resources/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_resources/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_resources/boolean_mask/Reshape"
  input: "report_uninitialized_resources/boolean_mask/Squeeze"
  input: "report_uninitialized_resources/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/GatherV2"
  input: "report_uninitialized_resources/boolean_mask/GatherV2"
  input: "concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "global_step"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_1"
  op: "VarIsInitializedOp"
  input: "boosted_trees/are_boundaries_ready"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_2"
  op: "VarIsInitializedOp"
  input: "boosted_trees/center_bias_needed"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/stack"
  op: "Pack"
  input: "report_uninitialized_variables_1/VarIsInitializedOp"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_1"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_2"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables_1/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 3
          }
        }
        string_val: "global_step"
        string_val: "boosted_trees/are_boundaries_ready"
        string_val: "boosted_trees/center_bias_needed"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  input: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_2"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables_1/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables_1/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables_1/Const"
  input: "report_uninitialized_variables_1/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables_1/LogicalNot"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape"
  input: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_resources_1/stack"
  op: "Pack"
  input: "boosted_trees/IsBoostedTreesEnsembleInitialized"
  input: "boosted_trees/QuantileAccumulator/IsBoostedTreesQuantileStreamResourceInitialized"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_resources_1/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_resources_1/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_resources_1/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 2
          }
        }
        string_val: "boosted_trees:0"
        string_val: "boosted_trees/QuantileAccumulator:0"
      }
    }
  }
}
node {
  name: "report_uninitialized_resources_1/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "report_uninitialized_resources_1/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_resources_1/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_resources_1/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_resources_1/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_resources_1/boolean_mask/Shape"
  input: "report_uninitialized_resources_1/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_resources_1/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_resources_1/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_resources_1/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_resources_1/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_resources_1/boolean_mask/strided_slice"
  input: "report_uninitialized_resources_1/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_resources_1/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "report_uninitialized_resources_1/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_resources_1/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_resources_1/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_resources_1/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_resources_1/boolean_mask/Shape_1"
  input: "report_uninitialized_resources_1/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_resources_1/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_resources_1/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_resources_1/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "report_uninitialized_resources_1/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_resources_1/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_resources_1/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_resources_1/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_resources_1/boolean_mask/Shape_2"
  input: "report_uninitialized_resources_1/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_resources_1/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_resources_1/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_resources_1/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_resources_1/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_resources_1/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_resources_1/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_resources_1/boolean_mask/strided_slice_1"
  input: "report_uninitialized_resources_1/boolean_mask/concat/values_1"
  input: "report_uninitialized_resources_1/boolean_mask/strided_slice_2"
  input: "report_uninitialized_resources_1/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_resources_1/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_resources_1/Const"
  input: "report_uninitialized_resources_1/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_resources_1/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_resources_1/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_resources_1/LogicalNot"
  input: "report_uninitialized_resources_1/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_resources_1/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_resources_1/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_resources_1/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_resources_1/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_resources_1/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_resources_1/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_resources_1/boolean_mask/Reshape"
  input: "report_uninitialized_resources_1/boolean_mask/Squeeze"
  input: "report_uninitialized_resources_1/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat_1"
  op: "ConcatV2"
  input: "report_uninitialized_variables_1/boolean_mask/GatherV2"
  input: "report_uninitialized_resources_1/boolean_mask/GatherV2"
  input: "concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "init_2"
  op: "NoOp"
}
node {
  name: "init_all_tables"
  op: "NoOp"
  input: "^boosted_trees/transform_features/Origin_indicator/Origin_lookup/hash_table/table_init/LookupTableImportV2"
}
node {
  name: "init_3"
  op: "NoOp"
}
node {
  name: "group_deps_2"
  op: "NoOp"
  input: "^init_2"
  input: "^init_3"
  input: "^init_all_tables"
}
node {
  name: "Merge/MergeSummary"
  op: "MergeSummary"
  input: "boosted_trees/ensemble/num_trees"
  input: "boosted_trees/ensemble/num_finalized_trees"
  input: "boosted_trees/ensemble/num_attempted_layers"
  input: "loss"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/filename/input"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/filename"
  op: "PlaceholderWithDefault"
  input: "save/filename/input"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save/Const"
  op: "PlaceholderWithDefault"
  input: "save/filename"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save/StaticRegexFullMatch"
  op: "StaticRegexFullMatch"
  input: "save/Const"
  device: "/device:CPU:*"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "pattern"
    value {
      s: "^s3://.*"
    }
  }
}
node {
  name: "save/Const_1"
  op: "Const"
  device: "/device:CPU:*"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ".part"
      }
    }
  }
}
node {
  name: "save/Const_2"
  op: "Const"
  device: "/device:CPU:*"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "_temp_d11eaecfdd1d4d57b0fbdd78b3b9f5fa/part"
      }
    }
  }
}
node {
  name: "save/Select"
  op: "Select"
  input: "save/StaticRegexFullMatch"
  input: "save/Const_1"
  input: "save/Const_2"
  device: "/device:CPU:*"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/StringJoin"
  op: "StringJoin"
  input: "save/Const"
  input: "save/Select"
  device: "/device:CPU:*"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "separator"
    value {
      s: ""
    }
  }
}
node {
  name: "save/num_shards"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "save/ShardedFilename/shard"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "save/ShardedFilename"
  op: "ShardedFilename"
  input: "save/StringJoin"
  input: "save/ShardedFilename/shard"
  input: "save/num_shards"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/SaveV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 10
          }
        }
        string_val: "boosted_trees/QuantileAccumulator:0_bucket_boundaries_0"
        string_val: "boosted_trees/QuantileAccumulator:0_bucket_boundaries_1"
        string_val: "boosted_trees/QuantileAccumulator:0_bucket_boundaries_2"
        string_val: "boosted_trees/QuantileAccumulator:0_bucket_boundaries_3"
        string_val: "boosted_trees/QuantileAccumulator:0_bucket_boundaries_4"
        string_val: "boosted_trees/are_boundaries_ready"
        string_val: "boosted_trees/center_bias_needed"
        string_val: "boosted_trees:0_stamp"
        string_val: "boosted_trees:0_serialized"
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save/SaveV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 10
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/SaveV2"
  op: "SaveV2"
  input: "save/ShardedFilename"
  input: "save/SaveV2/tensor_names"
  input: "save/SaveV2/shape_and_slices"
  input: "boosted_trees/BoostedTreesQuantileStreamResourceGetBucketBoundaries"
  input: "boosted_trees/BoostedTreesQuantileStreamResourceGetBucketBoundaries:1"
  input: "boosted_trees/BoostedTreesQuantileStreamResourceGetBucketBoundaries:2"
  input: "boosted_trees/BoostedTreesQuantileStreamResourceGetBucketBoundaries:3"
  input: "boosted_trees/BoostedTreesQuantileStreamResourceGetBucketBoundaries:4"
  input: "boosted_trees/are_boundaries_ready/Read/ReadVariableOp"
  input: "boosted_trees/center_bias_needed/Read/ReadVariableOp"
  input: "boosted_trees/BoostedTreesSerializeEnsemble"
  input: "boosted_trees/BoostedTreesSerializeEnsemble:1"
  input: "global_step/Read/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_BOOL
        type: DT_BOOL
        type: DT_INT64
        type: DT_STRING
        type: DT_INT64
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/ShardedFilename"
  input: "^save/SaveV2"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/ShardedFilename"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/MergeV2Checkpoints/checkpoint_prefixes"
  op: "Pack"
  input: "save/ShardedFilename"
  input: "^save/control_dependency"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "save/MergeV2Checkpoints"
  op: "MergeV2Checkpoints"
  input: "save/MergeV2Checkpoints/checkpoint_prefixes"
  input: "save/Const"
  device: "/device:CPU:0"
  attr {
    key: "delete_old_dirs"
    value {
      b: true
    }
  }
}
node {
  name: "save/Identity"
  op: "Identity"
  input: "save/Const"
  input: "^save/MergeV2Checkpoints"
  input: "^save/control_dependency"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/RestoreV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 10
          }
        }
        string_val: "boosted_trees/QuantileAccumulator:0_bucket_boundaries_0"
        string_val: "boosted_trees/QuantileAccumulator:0_bucket_boundaries_1"
        string_val: "boosted_trees/QuantileAccumulator:0_bucket_boundaries_2"
        string_val: "boosted_trees/QuantileAccumulator:0_bucket_boundaries_3"
        string_val: "boosted_trees/QuantileAccumulator:0_bucket_boundaries_4"
        string_val: "boosted_trees/are_boundaries_ready"
        string_val: "boosted_trees/center_bias_needed"
        string_val: "boosted_trees:0_stamp"
        string_val: "boosted_trees:0_serialized"
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save/RestoreV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 10
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2/tensor_names"
  input: "save/RestoreV2/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_BOOL
        type: DT_BOOL
        type: DT_INT64
        type: DT_STRING
        type: DT_INT64
      }
    }
  }
}
node {
  name: "save/BoostedTreesQuantileStreamResourceDeserialize"
  op: "BoostedTreesQuantileStreamResourceDeserialize"
  input: "boosted_trees/QuantileAccumulator"
  input: "save/RestoreV2"
  input: "save/RestoreV2:1"
  input: "save/RestoreV2:2"
  input: "save/RestoreV2:3"
  input: "save/RestoreV2:4"
  input: "^boosted_trees/QuantileAccumulator/BoostedTreesCreateQuantileStreamResource"
  attr {
    key: "num_streams"
    value {
      i: 5
    }
  }
}
node {
  name: "save/Identity_1"
  op: "Identity"
  input: "save/RestoreV2:5"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp"
  op: "AssignVariableOp"
  input: "boosted_trees/are_boundaries_ready"
  input: "save/Identity_1"
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "save/Identity_2"
  op: "Identity"
  input: "save/RestoreV2:6"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_1"
  op: "AssignVariableOp"
  input: "boosted_trees/center_bias_needed"
  input: "save/Identity_2"
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "save/BoostedTreesDeserializeEnsemble"
  op: "BoostedTreesDeserializeEnsemble"
  input: "boosted_trees"
  input: "save/RestoreV2:7"
  input: "save/RestoreV2:8"
  input: "^boosted_trees/BoostedTreesCreateEnsemble"
}
node {
  name: "save/Identity_3"
  op: "Identity"
  input: "save/RestoreV2:9"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_2"
  op: "AssignVariableOp"
  input: "global_step"
  input: "save/Identity_3"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "save/restore_shard"
  op: "NoOp"
  input: "^save/AssignVariableOp"
  input: "^save/AssignVariableOp_1"
  input: "^save/AssignVariableOp_2"
  input: "^save/BoostedTreesDeserializeEnsemble"
  input: "^save/BoostedTreesQuantileStreamResourceDeserialize"
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/restore_shard"
}
library {
  function {
    signature {
      name: "head_cond_true_285"
      input_arg {
        name: "gradients_head_weighted_loss_value_grad_div_no_nan_head_weighted_loss_num_elements_cast"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_head_weighted_loss_value_grad_neg_head_weighted_loss_sum_1"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_head_weighted_loss_sum_grad_shape_head_weighted_loss_mul"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_head_weighted_loss_mul_grad_shape_head_mean_squared_error_mul"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_head_weighted_loss_mul_grad_shape_1_head_weighted_loss_cast_x"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_head_mean_squared_error_mul_grad_shape_head_mean_squared_error_squareddifference"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_head_mean_squared_error_mul_grad_shape_1_head_mean_squared_error_cast_x"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_head_mean_squared_error_squareddifference_grad_sub_boosted_trees_add"
        type: DT_FLOAT
      }
      input_arg {
        name: "gradients_head_mean_squared_error_squareddifference_grad_sub_head_cast"
        type: DT_FLOAT
      }
      input_arg {
        name: "boostedtreesaggregatestats_boosted_trees_boostedtreestrainingpredict"
        type: DT_INT32
      }
      input_arg {
        name: "boostedtreesaggregatestats_boosted_trees_expanddims"
        type: DT_INT32
      }
      input_arg {
        name: "boostedtreesaggregatestats_1_boosted_trees_expanddims_1"
        type: DT_INT32
      }
      input_arg {
        name: "boostedtreesaggregatestats_2_boosted_trees_expanddims_2"
        type: DT_INT32
      }
      input_arg {
        name: "boostedtreesaggregatestats_3_boosted_trees_expanddims_3"
        type: DT_INT32
      }
      input_arg {
        name: "boostedtreesaggregatestats_4_boosted_trees_expanddims_7"
        type: DT_INT32
      }
      input_arg {
        name: "boostedtreesaggregatestats_5_boosted_trees_expanddims_4"
        type: DT_INT32
      }
      input_arg {
        name: "boostedtreesaggregatestats_6_boosted_trees_expanddims_5"
        type: DT_INT32
      }
      input_arg {
        name: "boostedtreesaggregatestats_7_boosted_trees_expanddims_6"
        type: DT_INT32
      }
      input_arg {
        name: "boostedtreesaggregatestats_8_boosted_trees_transform_features_modelyear_bucketized_bucketize"
        type: DT_INT32
      }
      input_arg {
        name: "resourceaccumulatorapplygradient_boosted_trees_conditional_accumulator"
        type: DT_RESOURCE
      }
      input_arg {
        name: "resourceaccumulatorapplygradient_boosted_trees_stamp_token"
        type: DT_INT64
      }
      input_arg {
        name: "resourceaccumulatorapplygradient_1_boosted_trees_conditional_accumulator_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "resourceaccumulatorapplygradient_2_boosted_trees_conditional_accumulator_2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "wait_until_n_batches_accumulated_boosted_trees_last_layer_nodes_range"
        type: DT_INT32
      }
      input_arg {
        name: "wait_until_n_batches_accumulated_boosted_trees"
        type: DT_RESOURCE
      }
      input_arg {
        name: "assignaddvariableop_global_step"
        type: DT_RESOURCE
      }
      input_arg {
        name: "identity_head_cond_readvariableop"
        type: DT_BOOL
      }
      input_arg {
        name: "placeholder"
        type: DT_DOUBLE
      }
      input_arg {
        name: "placeholder_1"
        type: DT_DOUBLE
      }
      input_arg {
        name: "placeholder_2"
        type: DT_DOUBLE
      }
      input_arg {
        name: "placeholder_3"
        type: DT_DOUBLE
      }
      input_arg {
        name: "placeholder_4"
        type: DT_DOUBLE
      }
      input_arg {
        name: "placeholder_5"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_6"
        type: DT_RESOURCE
      }
      input_arg {
        name: "placeholder_7"
        type: DT_RESOURCE
      }
      output_arg {
        name: "identity"
        type: DT_BOOL
      }
      is_stateful: true
    }
    node_def {
      name: "Gradients/Shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Gradients/Shape"
      }
    }
    node_def {
      name: "Gradients/grad_ys_0"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Gradients/grad_ys_0"
      }
    }
    node_def {
      name: "Gradients/Fill"
      op: "Fill"
      input: "Gradients/Shape:output:0"
      input: "Gradients/grad_ys_0:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Gradients/Fill"
      }
    }
    node_def {
      name: "Gradients/head/weighted_loss/value_grad/Shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Gradients/head/weighted_loss/value_grad/Shape"
      }
    }
    node_def {
      name: "Gradients/head/weighted_loss/value_grad/Shape_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Gradients/head/weighted_loss/value_grad/Shape_1"
      }
    }
    node_def {
      name: "Gradients/head/weighted_loss/value_grad/BroadcastGradientArgs"
      op: "BroadcastGradientArgs"
      input: "Gradients/head/weighted_loss/value_grad/Shape:output:0"
      input: "Gradients/head/weighted_loss/value_grad/Shape_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Gradients/head/weighted_loss/value_grad/BroadcastGradientArgs"
      }
    }
    node_def {
      name: "Gradients/head/weighted_loss/value_grad/div_no_nan"
      op: "DivNoNan"
      input: "Gradients/Fill:output:0"
      input: "gradients_head_weighted_loss_value_grad_div_no_nan_head_weighted_loss_num_elements_cast"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Gradients/head/weighted_loss/value_grad/div_no_nan"
      }
    }
    node_def {
      name: "Gradients/head/weighted_loss/value_grad/Sum"
      op: "Sum"
      input: "Gradients/head/weighted_loss/value_grad/div_no_nan:z:0"
      input: "Gradients/head/weighted_loss/value_grad/BroadcastGradientArgs:r0:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "Gradients/head/weighted_loss/value_grad/Sum"
      }
    }
    node_def {
      name: "Gradients/head/weighted_loss/value_grad/Reshape"
      op: "Reshape"
      input: "Gradients/head/weighted_loss/value_grad/Sum:output:0"
      input: "Gradients/head/weighted_loss/value_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Gradients/head/weighted_loss/value_grad/Reshape"
      }
    }
    node_def {
      name: "Gradients/head/weighted_loss/value_grad/Neg"
      op: "Neg"
      input: "gradients_head_weighted_loss_value_grad_neg_head_weighted_loss_sum_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Gradients/head/weighted_loss/value_grad/Neg"
      }
    }
    node_def {
      name: "Gradients/head/weighted_loss/value_grad/div_no_nan_1"
      op: "DivNoNan"
      input: "Gradients/head/weighted_loss/value_grad/Neg:y:0"
      input: "gradients_head_weighted_loss_value_grad_div_no_nan_head_weighted_loss_num_elements_cast"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Gradients/head/weighted_loss/value_grad/div_no_nan_1"
      }
    }
    node_def {
      name: "Gradients/head/weighted_loss/value_grad/div_no_nan_2"
      op: "DivNoNan"
      input: "Gradients/head/weighted_loss/value_grad/div_no_nan_1:z:0"
      input: "gradients_head_weighted_loss_value_grad_div_no_nan_head_weighted_loss_num_elements_cast"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Gradients/head/weighted_loss/value_grad/div_no_nan_2"
      }
    }
    node_def {
      name: "Gradients/head/weighted_loss/value_grad/mul"
      op: "Mul"
      input: "Gradients/Fill:output:0"
      input: "Gradients/head/weighted_loss/value_grad/div_no_nan_2:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Gradients/head/weighted_loss/value_grad/mul"
      }
    }
    node_def {
      name: "Gradients/head/weighted_loss/value_grad/Sum_1"
      op: "Sum"
      input: "Gradients/head/weighted_loss/value_grad/mul:z:0"
      input: "Gradients/head/weighted_loss/value_grad/BroadcastGradientArgs:r1:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "Gradients/head/weighted_loss/value_grad/Sum_1"
      }
    }
    node_def {
      name: "Gradients/head/weighted_loss/value_grad/Reshape_1"
      op: "Reshape"
      input: "Gradients/head/weighted_loss/value_grad/Sum_1:output:0"
      input: "Gradients/head/weighted_loss/value_grad/Shape_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Gradients/head/weighted_loss/value_grad/Reshape_1"
      }
    }
    node_def {
      name: "Gradients/head/weighted_loss/Sum_1_grad/Reshape/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Gradients/head/weighted_loss/Sum_1_grad/Reshape/shape"
      }
    }
    node_def {
      name: "Gradients/head/weighted_loss/Sum_1_grad/Reshape"
      op: "Reshape"
      input: "Gradients/head/weighted_loss/value_grad/Reshape:output:0"
      input: "Gradients/head/weighted_loss/Sum_1_grad/Reshape/shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Gradients/head/weighted_loss/Sum_1_grad/Reshape"
      }
    }
    node_def {
      name: "Gradients/head/weighted_loss/Sum_1_grad/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Gradients/head/weighted_loss/Sum_1_grad/Const"
      }
    }
    node_def {
      name: "Gradients/head/weighted_loss/Sum_1_grad/Tile"
      op: "Tile"
      input: "Gradients/head/weighted_loss/Sum_1_grad/Reshape:output:0"
      input: "Gradients/head/weighted_loss/Sum_1_grad/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tmultiples"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Gradients/head/weighted_loss/Sum_1_grad/Tile"
      }
    }
    node_def {
      name: "Gradients/head/weighted_loss/Sum_grad/Reshape/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Gradients/head/weighted_loss/Sum_grad/Reshape/shape"
      }
    }
    node_def {
      name: "Gradients/head/weighted_loss/Sum_grad/Reshape"
      op: "Reshape"
      input: "Gradients/head/weighted_loss/Sum_1_grad/Tile:output:0"
      input: "Gradients/head/weighted_loss/Sum_grad/Reshape/shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Gradients/head/weighted_loss/Sum_grad/Reshape"
      }
    }
    node_def {
      name: "Gradients/head/weighted_loss/Sum_grad/Shape"
      op: "Shape"
      input: "gradients_head_weighted_loss_sum_grad_shape_head_weighted_loss_mul"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Gradients/head/weighted_loss/Sum_grad/Shape"
      }
    }
    node_def {
      name: "Gradients/head/weighted_loss/Sum_grad/Tile"
      op: "Tile"
      input: "Gradients/head/weighted_loss/Sum_grad/Reshape:output:0"
      input: "Gradients/head/weighted_loss/Sum_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tmultiples"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Gradients/head/weighted_loss/Sum_grad/Tile"
      }
    }
    node_def {
      name: "Gradients/head/weighted_loss/Mul_grad/Shape"
      op: "Shape"
      input: "gradients_head_weighted_loss_mul_grad_shape_head_mean_squared_error_mul"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Gradients/head/weighted_loss/Mul_grad/Shape"
      }
    }
    node_def {
      name: "Gradients/head/weighted_loss/Mul_grad/Shape_1"
      op: "Shape"
      input: "gradients_head_weighted_loss_mul_grad_shape_1_head_weighted_loss_cast_x"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Gradients/head/weighted_loss/Mul_grad/Shape_1"
      }
    }
    node_def {
      name: "Gradients/head/weighted_loss/Mul_grad/BroadcastGradientArgs"
      op: "BroadcastGradientArgs"
      input: "Gradients/head/weighted_loss/Mul_grad/Shape:output:0"
      input: "Gradients/head/weighted_loss/Mul_grad/Shape_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Gradients/head/weighted_loss/Mul_grad/BroadcastGradientArgs"
      }
    }
    node_def {
      name: "Gradients/head/weighted_loss/Mul_grad/Mul"
      op: "Mul"
      input: "Gradients/head/weighted_loss/Sum_grad/Tile:output:0"
      input: "gradients_head_weighted_loss_mul_grad_shape_1_head_weighted_loss_cast_x"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Gradients/head/weighted_loss/Mul_grad/Mul"
      }
    }
    node_def {
      name: "Gradients/head/weighted_loss/Mul_grad/Sum"
      op: "Sum"
      input: "Gradients/head/weighted_loss/Mul_grad/Mul:z:0"
      input: "Gradients/head/weighted_loss/Mul_grad/BroadcastGradientArgs:r0:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "Gradients/head/weighted_loss/Mul_grad/Sum"
      }
    }
    node_def {
      name: "Gradients/head/weighted_loss/Mul_grad/Reshape"
      op: "Reshape"
      input: "Gradients/head/weighted_loss/Mul_grad/Sum:output:0"
      input: "Gradients/head/weighted_loss/Mul_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Gradients/head/weighted_loss/Mul_grad/Reshape"
      }
    }
    node_def {
      name: "Gradients/head/weighted_loss/Mul_grad/Mul_1"
      op: "Mul"
      input: "gradients_head_weighted_loss_mul_grad_shape_head_mean_squared_error_mul"
      input: "Gradients/head/weighted_loss/Sum_grad/Tile:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Gradients/head/weighted_loss/Mul_grad/Mul_1"
      }
    }
    node_def {
      name: "Gradients/head/weighted_loss/Mul_grad/Sum_1"
      op: "Sum"
      input: "Gradients/head/weighted_loss/Mul_grad/Mul_1:z:0"
      input: "Gradients/head/weighted_loss/Mul_grad/BroadcastGradientArgs:r1:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "Gradients/head/weighted_loss/Mul_grad/Sum_1"
      }
    }
    node_def {
      name: "Gradients/head/weighted_loss/Mul_grad/Reshape_1"
      op: "Reshape"
      input: "Gradients/head/weighted_loss/Mul_grad/Sum_1:output:0"
      input: "Gradients/head/weighted_loss/Mul_grad/Shape_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Gradients/head/weighted_loss/Mul_grad/Reshape_1"
      }
    }
    node_def {
      name: "Gradients/head/mean_squared_error/Mul_grad/Shape"
      op: "Shape"
      input: "gradients_head_mean_squared_error_mul_grad_shape_head_mean_squared_error_squareddifference"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Gradients/head/mean_squared_error/Mul_grad/Shape"
      }
    }
    node_def {
      name: "Gradients/head/mean_squared_error/Mul_grad/Shape_1"
      op: "Shape"
      input: "gradients_head_mean_squared_error_mul_grad_shape_1_head_mean_squared_error_cast_x"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Gradients/head/mean_squared_error/Mul_grad/Shape_1"
      }
    }
    node_def {
      name: "Gradients/head/mean_squared_error/Mul_grad/BroadcastGradientArgs"
      op: "BroadcastGradientArgs"
      input: "Gradients/head/mean_squared_error/Mul_grad/Shape:output:0"
      input: "Gradients/head/mean_squared_error/Mul_grad/Shape_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Gradients/head/mean_squared_error/Mul_grad/BroadcastGradientArgs"
      }
    }
    node_def {
      name: "Gradients/head/mean_squared_error/Mul_grad/Mul"
      op: "Mul"
      input: "Gradients/head/weighted_loss/Mul_grad/Reshape:output:0"
      input: "gradients_head_mean_squared_error_mul_grad_shape_1_head_mean_squared_error_cast_x"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Gradients/head/mean_squared_error/Mul_grad/Mul"
      }
    }
    node_def {
      name: "Gradients/head/mean_squared_error/Mul_grad/Sum"
      op: "Sum"
      input: "Gradients/head/mean_squared_error/Mul_grad/Mul:z:0"
      input: "Gradients/head/mean_squared_error/Mul_grad/BroadcastGradientArgs:r0:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "Gradients/head/mean_squared_error/Mul_grad/Sum"
      }
    }
    node_def {
      name: "Gradients/head/mean_squared_error/Mul_grad/Reshape"
      op: "Reshape"
      input: "Gradients/head/mean_squared_error/Mul_grad/Sum:output:0"
      input: "Gradients/head/mean_squared_error/Mul_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Gradients/head/mean_squared_error/Mul_grad/Reshape"
      }
    }
    node_def {
      name: "Gradients/head/mean_squared_error/Mul_grad/Mul_1"
      op: "Mul"
      input: "gradients_head_mean_squared_error_mul_grad_shape_head_mean_squared_error_squareddifference"
      input: "Gradients/head/weighted_loss/Mul_grad/Reshape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Gradients/head/mean_squared_error/Mul_grad/Mul_1"
      }
    }
    node_def {
      name: "Gradients/head/mean_squared_error/Mul_grad/Sum_1"
      op: "Sum"
      input: "Gradients/head/mean_squared_error/Mul_grad/Mul_1:z:0"
      input: "Gradients/head/mean_squared_error/Mul_grad/BroadcastGradientArgs:r1:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "Gradients/head/mean_squared_error/Mul_grad/Sum_1"
      }
    }
    node_def {
      name: "Gradients/head/mean_squared_error/Mul_grad/Reshape_1"
      op: "Reshape"
      input: "Gradients/head/mean_squared_error/Mul_grad/Sum_1:output:0"
      input: "Gradients/head/mean_squared_error/Mul_grad/Shape_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Gradients/head/mean_squared_error/Mul_grad/Reshape_1"
      }
    }
    node_def {
      name: "Gradients/head/mean_squared_error/SquaredDifference_grad/scalar"
      op: "Const"
      input: "^Gradients/head/mean_squared_error/Mul_grad/Reshape"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 2.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Gradients/head/mean_squared_error/SquaredDifference_grad/scalar"
      }
    }
    node_def {
      name: "Gradients/head/mean_squared_error/SquaredDifference_grad/Mul"
      op: "Mul"
      input: "Gradients/head/mean_squared_error/SquaredDifference_grad/scalar:output:0"
      input: "Gradients/head/mean_squared_error/Mul_grad/Reshape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Gradients/head/mean_squared_error/SquaredDifference_grad/Mul"
      }
    }
    node_def {
      name: "Gradients/head/mean_squared_error/SquaredDifference_grad/sub"
      op: "Sub"
      input: "gradients_head_mean_squared_error_squareddifference_grad_sub_boosted_trees_add"
      input: "gradients_head_mean_squared_error_squareddifference_grad_sub_head_cast"
      input: "^Gradients/head/mean_squared_error/Mul_grad/Reshape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Gradients/head/mean_squared_error/SquaredDifference_grad/sub"
      }
    }
    node_def {
      name: "Gradients/head/mean_squared_error/SquaredDifference_grad/mul_1"
      op: "Mul"
      input: "Gradients/head/mean_squared_error/SquaredDifference_grad/Mul:z:0"
      input: "Gradients/head/mean_squared_error/SquaredDifference_grad/sub:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Gradients/head/mean_squared_error/SquaredDifference_grad/mul_1"
      }
    }
    node_def {
      name: "Gradients/head/mean_squared_error/SquaredDifference_grad/Shape"
      op: "Shape"
      input: "gradients_head_mean_squared_error_squareddifference_grad_sub_boosted_trees_add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Gradients/head/mean_squared_error/SquaredDifference_grad/Shape"
      }
    }
    node_def {
      name: "Gradients/head/mean_squared_error/SquaredDifference_grad/Shape_1"
      op: "Shape"
      input: "gradients_head_mean_squared_error_squareddifference_grad_sub_head_cast"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Gradients/head/mean_squared_error/SquaredDifference_grad/Shape_1"
      }
    }
    node_def {
      name: "Gradients/head/mean_squared_error/SquaredDifference_grad/BroadcastGradientArgs"
      op: "BroadcastGradientArgs"
      input: "Gradients/head/mean_squared_error/SquaredDifference_grad/Shape:output:0"
      input: "Gradients/head/mean_squared_error/SquaredDifference_grad/Shape_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Gradients/head/mean_squared_error/SquaredDifference_grad/BroadcastGradientArgs"
      }
    }
    node_def {
      name: "Gradients/head/mean_squared_error/SquaredDifference_grad/Sum"
      op: "Sum"
      input: "Gradients/head/mean_squared_error/SquaredDifference_grad/mul_1:z:0"
      input: "Gradients/head/mean_squared_error/SquaredDifference_grad/BroadcastGradientArgs:r0:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "Gradients/head/mean_squared_error/SquaredDifference_grad/Sum"
      }
    }
    node_def {
      name: "Gradients/head/mean_squared_error/SquaredDifference_grad/Reshape"
      op: "Reshape"
      input: "Gradients/head/mean_squared_error/SquaredDifference_grad/Sum:output:0"
      input: "Gradients/head/mean_squared_error/SquaredDifference_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Gradients/head/mean_squared_error/SquaredDifference_grad/Reshape"
      }
    }
    node_def {
      name: "Gradients/head/mean_squared_error/SquaredDifference_grad/Sum_1"
      op: "Sum"
      input: "Gradients/head/mean_squared_error/SquaredDifference_grad/mul_1:z:0"
      input: "Gradients/head/mean_squared_error/SquaredDifference_grad/BroadcastGradientArgs:r1:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "Gradients/head/mean_squared_error/SquaredDifference_grad/Sum_1"
      }
    }
    node_def {
      name: "Gradients/head/mean_squared_error/SquaredDifference_grad/Reshape_1"
      op: "Reshape"
      input: "Gradients/head/mean_squared_error/SquaredDifference_grad/Sum_1:output:0"
      input: "Gradients/head/mean_squared_error/SquaredDifference_grad/Shape_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Gradients/head/mean_squared_error/SquaredDifference_grad/Reshape_1"
      }
    }
    node_def {
      name: "Gradients/head/mean_squared_error/SquaredDifference_grad/Neg"
      op: "Neg"
      input: "Gradients/head/mean_squared_error/SquaredDifference_grad/Reshape_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Gradients/head/mean_squared_error/SquaredDifference_grad/Neg"
      }
    }
    node_def {
      name: "Hessians/Shape"
      op: "Shape"
      input: "Gradients/head/mean_squared_error/SquaredDifference_grad/Reshape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Hessians/Shape"
      }
    }
    node_def {
      name: "Hessians/grad_ys_0"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Hessians/grad_ys_0"
      }
    }
    node_def {
      name: "Hessians/Fill"
      op: "Fill"
      input: "Hessians/Shape:output:0"
      input: "Hessians/grad_ys_0:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Hessians/Fill"
      }
    }
    node_def {
      name: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/Reshape_grad/Shape"
      op: "Shape"
      input: "Gradients/head/mean_squared_error/SquaredDifference_grad/Sum:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/Reshape_grad/Shape"
      }
    }
    node_def {
      name: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/Reshape_grad/Reshape"
      op: "Reshape"
      input: "Hessians/Fill:output:0"
      input: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/Reshape_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/Reshape_grad/Reshape"
      }
    }
    node_def {
      name: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/Sum_grad/Shape"
      op: "Shape"
      input: "Gradients/head/mean_squared_error/SquaredDifference_grad/mul_1:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/Sum_grad/Shape"
      }
    }
    node_def {
      name: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/Sum_grad/Size"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/Sum_grad/Shape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 2
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/Sum_grad/Size"
      }
    }
    node_def {
      name: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/Sum_grad/add"
      op: "AddV2"
      input: "Gradients/head/mean_squared_error/SquaredDifference_grad/BroadcastGradientArgs:r0:0"
      input: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/Sum_grad/Size:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/Sum_grad/Shape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/Sum_grad/add"
      }
    }
    node_def {
      name: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/Sum_grad/mod"
      op: "FloorMod"
      input: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/Sum_grad/add:z:0"
      input: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/Sum_grad/Size:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/Sum_grad/Shape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/Sum_grad/mod"
      }
    }
    node_def {
      name: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/Sum_grad/Shape_1"
      op: "Shape"
      input: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/Sum_grad/mod:z:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/Sum_grad/Shape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/Sum_grad/Shape_1"
      }
    }
    node_def {
      name: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/Sum_grad/range/start"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/Sum_grad/Shape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/Sum_grad/range/start"
      }
    }
    node_def {
      name: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/Sum_grad/range/delta"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/Sum_grad/Shape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/Sum_grad/range/delta"
      }
    }
    node_def {
      name: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/Sum_grad/range"
      op: "Range"
      input: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/Sum_grad/range/start:output:0"
      input: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/Sum_grad/Size:output:0"
      input: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/Sum_grad/range/delta:output:0"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/Sum_grad/Shape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/Sum_grad/range"
      }
    }
    node_def {
      name: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/Sum_grad/Fill/value"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/Sum_grad/Shape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/Sum_grad/Fill/value"
      }
    }
    node_def {
      name: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/Sum_grad/Fill"
      op: "Fill"
      input: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/Sum_grad/Shape_1:output:0"
      input: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/Sum_grad/Fill/value:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/Sum_grad/Shape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/Sum_grad/Fill"
      }
    }
    node_def {
      name: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/Sum_grad/DynamicStitch"
      op: "DynamicStitch"
      input: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/Sum_grad/range:output:0"
      input: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/Sum_grad/mod:z:0"
      input: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/Sum_grad/Shape:output:0"
      input: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/Sum_grad/Fill:output:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/Sum_grad/Shape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/Sum_grad/DynamicStitch"
      }
    }
    node_def {
      name: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/Sum_grad/Reshape"
      op: "Reshape"
      input: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/Reshape_grad/Reshape:output:0"
      input: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/Sum_grad/DynamicStitch:merged:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/Sum_grad/Reshape"
      }
    }
    node_def {
      name: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/Sum_grad/BroadcastTo"
      op: "BroadcastTo"
      input: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/Sum_grad/Reshape:output:0"
      input: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/Sum_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/Sum_grad/BroadcastTo"
      }
    }
    node_def {
      name: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/mul_1_grad/Shape"
      op: "Shape"
      input: "Gradients/head/mean_squared_error/SquaredDifference_grad/Mul:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/mul_1_grad/Shape"
      }
    }
    node_def {
      name: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/mul_1_grad/Shape_1"
      op: "Shape"
      input: "Gradients/head/mean_squared_error/SquaredDifference_grad/sub:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/mul_1_grad/Shape_1"
      }
    }
    node_def {
      name: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/mul_1_grad/BroadcastGradientArgs"
      op: "BroadcastGradientArgs"
      input: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/mul_1_grad/Shape:output:0"
      input: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/mul_1_grad/Shape_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/mul_1_grad/BroadcastGradientArgs"
      }
    }
    node_def {
      name: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/mul_1_grad/Mul"
      op: "Mul"
      input: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/Sum_grad/BroadcastTo:output:0"
      input: "Gradients/head/mean_squared_error/SquaredDifference_grad/sub:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/mul_1_grad/Mul"
      }
    }
    node_def {
      name: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/mul_1_grad/Sum"
      op: "Sum"
      input: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/mul_1_grad/Mul:z:0"
      input: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/mul_1_grad/BroadcastGradientArgs:r0:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/mul_1_grad/Sum"
      }
    }
    node_def {
      name: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/mul_1_grad/Reshape"
      op: "Reshape"
      input: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/mul_1_grad/Sum:output:0"
      input: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/mul_1_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/mul_1_grad/Reshape"
      }
    }
    node_def {
      name: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/mul_1_grad/Mul_1"
      op: "Mul"
      input: "Gradients/head/mean_squared_error/SquaredDifference_grad/Mul:z:0"
      input: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/Sum_grad/BroadcastTo:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/mul_1_grad/Mul_1"
      }
    }
    node_def {
      name: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/mul_1_grad/Sum_1"
      op: "Sum"
      input: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/mul_1_grad/Mul_1:z:0"
      input: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/mul_1_grad/BroadcastGradientArgs:r1:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/mul_1_grad/Sum_1"
      }
    }
    node_def {
      name: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/mul_1_grad/Reshape_1"
      op: "Reshape"
      input: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/mul_1_grad/Sum_1:output:0"
      input: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/mul_1_grad/Shape_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/mul_1_grad/Reshape_1"
      }
    }
    node_def {
      name: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/sub_grad/Shape"
      op: "Shape"
      input: "gradients_head_mean_squared_error_squareddifference_grad_sub_boosted_trees_add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/sub_grad/Shape"
      }
    }
    node_def {
      name: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/sub_grad/Shape_1"
      op: "Shape"
      input: "gradients_head_mean_squared_error_squareddifference_grad_sub_head_cast"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/sub_grad/Shape_1"
      }
    }
    node_def {
      name: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/sub_grad/BroadcastGradientArgs"
      op: "BroadcastGradientArgs"
      input: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/sub_grad/Shape:output:0"
      input: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/sub_grad/Shape_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/sub_grad/BroadcastGradientArgs"
      }
    }
    node_def {
      name: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/sub_grad/Sum"
      op: "Sum"
      input: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/mul_1_grad/Reshape_1:output:0"
      input: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/sub_grad/BroadcastGradientArgs:r0:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/sub_grad/Sum"
      }
    }
    node_def {
      name: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/sub_grad/Reshape"
      op: "Reshape"
      input: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/sub_grad/Sum:output:0"
      input: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/sub_grad/Shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/sub_grad/Reshape"
      }
    }
    node_def {
      name: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/sub_grad/Neg"
      op: "Neg"
      input: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/mul_1_grad/Reshape_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/sub_grad/Neg"
      }
    }
    node_def {
      name: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/sub_grad/Sum_1"
      op: "Sum"
      input: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/sub_grad/Neg:y:0"
      input: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/sub_grad/BroadcastGradientArgs:r1:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/sub_grad/Sum_1"
      }
    }
    node_def {
      name: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/sub_grad/Reshape_1"
      op: "Reshape"
      input: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/sub_grad/Sum_1:output:0"
      input: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/sub_grad/Shape_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/sub_grad/Reshape_1"
      }
    }
    node_def {
      name: "BoostedTreesAggregateStats"
      op: "BoostedTreesAggregateStats"
      input: "boostedtreesaggregatestats_boosted_trees_boostedtreestrainingpredict"
      input: "Gradients/head/mean_squared_error/SquaredDifference_grad/Reshape:output:0"
      input: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/sub_grad/Reshape:output:0"
      input: "boostedtreesaggregatestats_boosted_trees_expanddims"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 63
              }
              dim {
                size: 1
              }
              dim {
                size: 101
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "max_splits"
        value {
          i: 63
        }
      }
      attr {
        key: "num_buckets"
        value {
          i: 100
        }
      }
      experimental_debug_info {
        original_node_names: "BoostedTreesAggregateStats"
      }
    }
    node_def {
      name: "BoostedTreesAggregateStats_1"
      op: "BoostedTreesAggregateStats"
      input: "boostedtreesaggregatestats_boosted_trees_boostedtreestrainingpredict"
      input: "Gradients/head/mean_squared_error/SquaredDifference_grad/Reshape:output:0"
      input: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/sub_grad/Reshape:output:0"
      input: "boostedtreesaggregatestats_1_boosted_trees_expanddims_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 63
              }
              dim {
                size: 1
              }
              dim {
                size: 101
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "max_splits"
        value {
          i: 63
        }
      }
      attr {
        key: "num_buckets"
        value {
          i: 100
        }
      }
      experimental_debug_info {
        original_node_names: "BoostedTreesAggregateStats_1"
      }
    }
    node_def {
      name: "BoostedTreesAggregateStats_2"
      op: "BoostedTreesAggregateStats"
      input: "boostedtreesaggregatestats_boosted_trees_boostedtreestrainingpredict"
      input: "Gradients/head/mean_squared_error/SquaredDifference_grad/Reshape:output:0"
      input: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/sub_grad/Reshape:output:0"
      input: "boostedtreesaggregatestats_2_boosted_trees_expanddims_2"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 63
              }
              dim {
                size: 1
              }
              dim {
                size: 101
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "max_splits"
        value {
          i: 63
        }
      }
      attr {
        key: "num_buckets"
        value {
          i: 100
        }
      }
      experimental_debug_info {
        original_node_names: "BoostedTreesAggregateStats_2"
      }
    }
    node_def {
      name: "BoostedTreesAggregateStats_3"
      op: "BoostedTreesAggregateStats"
      input: "boostedtreesaggregatestats_boosted_trees_boostedtreestrainingpredict"
      input: "Gradients/head/mean_squared_error/SquaredDifference_grad/Reshape:output:0"
      input: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/sub_grad/Reshape:output:0"
      input: "boostedtreesaggregatestats_3_boosted_trees_expanddims_3"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 63
              }
              dim {
                size: 1
              }
              dim {
                size: 101
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "max_splits"
        value {
          i: 63
        }
      }
      attr {
        key: "num_buckets"
        value {
          i: 100
        }
      }
      experimental_debug_info {
        original_node_names: "BoostedTreesAggregateStats_3"
      }
    }
    node_def {
      name: "BoostedTreesAggregateStats_4"
      op: "BoostedTreesAggregateStats"
      input: "boostedtreesaggregatestats_boosted_trees_boostedtreestrainingpredict"
      input: "Gradients/head/mean_squared_error/SquaredDifference_grad/Reshape:output:0"
      input: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/sub_grad/Reshape:output:0"
      input: "boostedtreesaggregatestats_4_boosted_trees_expanddims_7"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 63
              }
              dim {
                size: 1
              }
              dim {
                size: 101
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "max_splits"
        value {
          i: 63
        }
      }
      attr {
        key: "num_buckets"
        value {
          i: 100
        }
      }
      experimental_debug_info {
        original_node_names: "BoostedTreesAggregateStats_4"
      }
    }
    node_def {
      name: "BoostedTreesAggregateStats_5"
      op: "BoostedTreesAggregateStats"
      input: "boostedtreesaggregatestats_boosted_trees_boostedtreestrainingpredict"
      input: "Gradients/head/mean_squared_error/SquaredDifference_grad/Reshape:output:0"
      input: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/sub_grad/Reshape:output:0"
      input: "boostedtreesaggregatestats_5_boosted_trees_expanddims_4"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 63
              }
              dim {
                size: 1
              }
              dim {
                size: 3
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "max_splits"
        value {
          i: 63
        }
      }
      attr {
        key: "num_buckets"
        value {
          i: 2
        }
      }
      experimental_debug_info {
        original_node_names: "BoostedTreesAggregateStats_5"
      }
    }
    node_def {
      name: "BoostedTreesAggregateStats_6"
      op: "BoostedTreesAggregateStats"
      input: "boostedtreesaggregatestats_boosted_trees_boostedtreestrainingpredict"
      input: "Gradients/head/mean_squared_error/SquaredDifference_grad/Reshape:output:0"
      input: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/sub_grad/Reshape:output:0"
      input: "boostedtreesaggregatestats_6_boosted_trees_expanddims_5"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 63
              }
              dim {
                size: 1
              }
              dim {
                size: 3
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "max_splits"
        value {
          i: 63
        }
      }
      attr {
        key: "num_buckets"
        value {
          i: 2
        }
      }
      experimental_debug_info {
        original_node_names: "BoostedTreesAggregateStats_6"
      }
    }
    node_def {
      name: "BoostedTreesAggregateStats_7"
      op: "BoostedTreesAggregateStats"
      input: "boostedtreesaggregatestats_boosted_trees_boostedtreestrainingpredict"
      input: "Gradients/head/mean_squared_error/SquaredDifference_grad/Reshape:output:0"
      input: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/sub_grad/Reshape:output:0"
      input: "boostedtreesaggregatestats_7_boosted_trees_expanddims_6"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 63
              }
              dim {
                size: 1
              }
              dim {
                size: 3
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "max_splits"
        value {
          i: 63
        }
      }
      attr {
        key: "num_buckets"
        value {
          i: 2
        }
      }
      experimental_debug_info {
        original_node_names: "BoostedTreesAggregateStats_7"
      }
    }
    node_def {
      name: "BoostedTreesAggregateStats_8"
      op: "BoostedTreesAggregateStats"
      input: "boostedtreesaggregatestats_boosted_trees_boostedtreestrainingpredict"
      input: "Gradients/head/mean_squared_error/SquaredDifference_grad/Reshape:output:0"
      input: "Hessians/Gradients/head/mean_squared_error/SquaredDifference_grad/sub_grad/Reshape:output:0"
      input: "boostedtreesaggregatestats_8_boosted_trees_transform_features_modelyear_bucketized_bucketize"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 63
              }
              dim {
                size: 1
              }
              dim {
                size: 5
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "max_splits"
        value {
          i: 63
        }
      }
      attr {
        key: "num_buckets"
        value {
          i: 4
        }
      }
      experimental_debug_info {
        original_node_names: "BoostedTreesAggregateStats_8"
      }
    }
    node_def {
      name: "stack"
      op: "Pack"
      input: "BoostedTreesAggregateStats:stats_summary:0"
      input: "BoostedTreesAggregateStats_1:stats_summary:0"
      input: "BoostedTreesAggregateStats_2:stats_summary:0"
      input: "BoostedTreesAggregateStats_3:stats_summary:0"
      input: "BoostedTreesAggregateStats_4:stats_summary:0"
      attr {
        key: "N"
        value {
          i: 5
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 5
              }
              dim {
                size: 63
              }
              dim {
                size: 1
              }
              dim {
                size: 101
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
      experimental_debug_info {
        original_node_names: "stack"
      }
    }
    node_def {
      name: "ResourceAccumulatorApplyGradient"
      op: "ResourceAccumulatorApplyGradient"
      input: "resourceaccumulatorapplygradient_boosted_trees_conditional_accumulator"
      input: "resourceaccumulatorapplygradient_boosted_trees_stamp_token"
      input: "stack:output:0"
      attr {
        key: "_output_shapes"
        value {
          list {
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "ResourceAccumulatorApplyGradient"
      }
    }
    node_def {
      name: "stack_1"
      op: "Pack"
      input: "BoostedTreesAggregateStats_5:stats_summary:0"
      input: "BoostedTreesAggregateStats_6:stats_summary:0"
      input: "BoostedTreesAggregateStats_7:stats_summary:0"
      attr {
        key: "N"
        value {
          i: 3
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 63
              }
              dim {
                size: 1
              }
              dim {
                size: 3
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
      experimental_debug_info {
        original_node_names: "stack_1"
      }
    }
    node_def {
      name: "ResourceAccumulatorApplyGradient_1"
      op: "ResourceAccumulatorApplyGradient"
      input: "resourceaccumulatorapplygradient_1_boosted_trees_conditional_accumulator_1"
      input: "resourceaccumulatorapplygradient_boosted_trees_stamp_token"
      input: "stack_1:output:0"
      attr {
        key: "_output_shapes"
        value {
          list {
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "ResourceAccumulatorApplyGradient_1"
      }
    }
    node_def {
      name: "stack_2"
      op: "Pack"
      input: "BoostedTreesAggregateStats_8:stats_summary:0"
      attr {
        key: "N"
        value {
          i: 1
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 63
              }
              dim {
                size: 1
              }
              dim {
                size: 5
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
      experimental_debug_info {
        original_node_names: "stack_2"
      }
    }
    node_def {
      name: "ResourceAccumulatorApplyGradient_2"
      op: "ResourceAccumulatorApplyGradient"
      input: "resourceaccumulatorapplygradient_2_boosted_trees_conditional_accumulator_2"
      input: "resourceaccumulatorapplygradient_boosted_trees_stamp_token"
      input: "stack_2:output:0"
      attr {
        key: "_output_shapes"
        value {
          list {
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "ResourceAccumulatorApplyGradient_2"
      }
    }
    node_def {
      name: "conditional_accumulator_NumAccumulated"
      op: "ResourceAccumulatorNumAccumulated"
      input: "resourceaccumulatorapplygradient_boosted_trees_conditional_accumulator"
      input: "^ResourceAccumulatorApplyGradient"
      input: "^ResourceAccumulatorApplyGradient_1"
      input: "^ResourceAccumulatorApplyGradient_2"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "conditional_accumulator_NumAccumulated"
      }
    }
    node_def {
      name: "conditional_accumulator_1_NumAccumulated"
      op: "ResourceAccumulatorNumAccumulated"
      input: "resourceaccumulatorapplygradient_1_boosted_trees_conditional_accumulator_1"
      input: "^ResourceAccumulatorApplyGradient"
      input: "^ResourceAccumulatorApplyGradient_1"
      input: "^ResourceAccumulatorApplyGradient_2"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "conditional_accumulator_1_NumAccumulated"
      }
    }
    node_def {
      name: "conditional_accumulator_2_NumAccumulated"
      op: "ResourceAccumulatorNumAccumulated"
      input: "resourceaccumulatorapplygradient_2_boosted_trees_conditional_accumulator_2"
      input: "^ResourceAccumulatorApplyGradient"
      input: "^ResourceAccumulatorApplyGradient_1"
      input: "^ResourceAccumulatorApplyGradient_2"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "conditional_accumulator_2_NumAccumulated"
      }
    }
    node_def {
      name: "stack_3"
      op: "Pack"
      input: "conditional_accumulator_NumAccumulated:num_accumulated:0"
      input: "conditional_accumulator_1_NumAccumulated:num_accumulated:0"
      input: "conditional_accumulator_2_NumAccumulated:num_accumulated:0"
      attr {
        key: "N"
        value {
          i: 3
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
      experimental_debug_info {
        original_node_names: "stack_3"
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      input: "^ResourceAccumulatorApplyGradient"
      input: "^ResourceAccumulatorApplyGradient_1"
      input: "^ResourceAccumulatorApplyGradient_2"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const"
      }
    }
    node_def {
      name: "Min"
      op: "Min"
      input: "stack_3:output:0"
      input: "Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "Min"
      }
    }
    node_def {
      name: "GreaterEqual/y"
      op: "Const"
      input: "^ResourceAccumulatorApplyGradient"
      input: "^ResourceAccumulatorApplyGradient_1"
      input: "^ResourceAccumulatorApplyGradient_2"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 20
          }
        }
      }
      experimental_debug_info {
        original_node_names: "GreaterEqual/y"
      }
    }
    node_def {
      name: "GreaterEqual"
      op: "GreaterEqual"
      input: "Min:output:0"
      input: "GreaterEqual/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "GreaterEqual"
      }
    }
    node_def {
      name: "wait_until_n_batches_accumulated"
      op: "If"
      input: "GreaterEqual:z:0"
      input: "resourceaccumulatorapplygradient_boosted_trees_conditional_accumulator"
      input: "resourceaccumulatorapplygradient_1_boosted_trees_conditional_accumulator_1"
      input: "resourceaccumulatorapplygradient_2_boosted_trees_conditional_accumulator_2"
      input: "wait_until_n_batches_accumulated_boosted_trees_last_layer_nodes_range"
      input: "wait_until_n_batches_accumulated_boosted_trees"
      input: "GreaterEqual:z:0"
      attr {
        key: "Tcond"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Tin"
        value {
          list {
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_INT32
            type: DT_RESOURCE
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "_lower_using_switch_merge"
        value {
          b: true
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "_read_only_resource_inputs"
        value {
          list {
          }
        }
      }
      attr {
        key: "else_branch"
        value {
          func {
            name: "wait_until_n_batches_accumulated_false_427"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "then_branch"
        value {
          func {
            name: "wait_until_n_batches_accumulated_true_426"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "wait_until_n_batches_accumulated"
      }
    }
    node_def {
      name: "wait_until_n_batches_accumulated/Identity"
      op: "Identity"
      input: "wait_until_n_batches_accumulated:output:0"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "wait_until_n_batches_accumulated/Identity"
      }
    }
    node_def {
      name: "Const_1"
      op: "Const"
      input: "^wait_until_n_batches_accumulated/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const_1"
      }
    }
    node_def {
      name: "AssignAddVariableOp"
      op: "AssignAddVariableOp"
      input: "assignaddvariableop_global_step"
      input: "Const_1:output:0"
      attr {
        key: "_output_shapes"
        value {
          list {
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      experimental_debug_info {
        original_node_names: "AssignAddVariableOp"
      }
    }
    node_def {
      name: "grow_op"
      op: "NoOp"
      input: "^AssignAddVariableOp"
      input: "^wait_until_n_batches_accumulated/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
          }
        }
      }
      experimental_debug_info {
        original_node_names: "grow_op"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "identity_head_cond_readvariableop"
      input: "^grow_op"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
          shape {
          }
          shape {
            dim {
              size: -1
            }
            dim {
              size: 1
            }
          }
          shape {
            dim {
              size: -1
            }
            dim {
              size: 1
            }
          }
          shape {
          }
          shape {
            dim {
              size: -1
            }
            dim {
              size: 1
            }
          }
          shape {
          }
          shape {
            dim {
              size: -1
            }
            dim {
              size: 1
            }
          }
          shape {
            dim {
              size: -1
            }
            dim {
              size: 1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
            dim {
              size: 1
            }
          }
          shape {
            dim {
              size: -1
            }
            dim {
              size: 1
            }
          }
          shape {
            dim {
              size: -1
            }
            dim {
              size: 1
            }
          }
          shape {
            dim {
              size: -1
            }
            dim {
              size: 1
            }
          }
          shape {
            dim {
              size: -1
            }
            dim {
              size: 1
            }
          }
          shape {
            dim {
              size: -1
            }
            dim {
              size: 1
            }
          }
          shape {
            dim {
              size: -1
            }
            dim {
              size: 1
            }
          }
          shape {
            dim {
              size: -1
            }
            dim {
              size: 1
            }
          }
          shape {
            dim {
              size: -1
            }
            dim {
              size: 1
            }
          }
          shape {
            unknown_rank: true
          }
          shape {
          }
          shape {
            unknown_rank: true
          }
          shape {
            unknown_rank: true
          }
          shape {
            dim {
              size: 2
            }
          }
          shape {
            unknown_rank: true
          }
          shape {
            unknown_rank: true
          }
          shape {
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: 1
            }
          }
          shape {
            unknown_rank: true
          }
          shape {
            unknown_rank: true
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 1
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 1
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 5
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 1
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 6
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 7
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 1
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 8
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 1
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 9
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 10
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 1
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 11
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 1
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 12
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 1
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 13
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 1
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 14
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 1
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 15
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 1
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 16
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 1
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 17
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 1
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 18
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 1
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 19
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 2
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 20
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 21
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 2
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 22
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 2
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 23
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 2
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 24
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 25
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 26
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 27
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 28
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 29
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 30
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 31
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 32
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 1
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 33
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 34
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "UpdateQuantile_wait_until_quaniles_accumulated_false_568"
      input_arg {
        name: "placeholder"
        type: DT_RESOURCE
      }
      input_arg {
        name: "placeholder_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "placeholder_2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "identity_updatequantile_greaterequal"
        type: DT_BOOL
      }
      output_arg {
        name: "identity"
        type: DT_BOOL
      }
    }
    node_def {
      name: "NoOp"
      op: "NoOp"
      attr {
        key: "_output_shapes"
        value {
          list {
          }
        }
      }
      experimental_debug_info {
        original_node_names: "NoOp"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "identity_updatequantile_greaterequal"
      input: "^NoOp"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            unknown_rank: true
          }
          shape {
            unknown_rank: true
          }
          shape {
            unknown_rank: true
          }
          shape {
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 2
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "wait_until_n_batches_accumulated_false_427"
      input_arg {
        name: "placeholder"
        type: DT_RESOURCE
      }
      input_arg {
        name: "placeholder_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "placeholder_2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "placeholder_3"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_4"
        type: DT_RESOURCE
      }
      input_arg {
        name: "identity_greaterequal"
        type: DT_BOOL
      }
      output_arg {
        name: "identity"
        type: DT_BOOL
      }
    }
    node_def {
      name: "NoOp"
      op: "NoOp"
      attr {
        key: "_output_shapes"
        value {
          list {
          }
        }
      }
      experimental_debug_info {
        original_node_names: "NoOp"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "identity_greaterequal"
      input: "^NoOp"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            unknown_rank: true
          }
          shape {
            unknown_rank: true
          }
          shape {
            unknown_rank: true
          }
          shape {
            dim {
              size: 2
            }
          }
          shape {
            unknown_rank: true
          }
          shape {
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 2
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 2
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 2
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 2
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 5
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "global_step_cond_false_41"
      input_arg {
        name: "placeholder"
        type: DT_RESOURCE
      }
      input_arg {
        name: "global_step_initializer_zeros_0"
        type: DT_INT64
      }
      output_arg {
        name: "global_step_initializer_zeros"
        type: DT_INT64
      }
    }
    ret {
      key: "global_step_initializer_zeros"
      value: "global_step_initializer_zeros_0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            unknown_rank: true
          }
          shape {
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "head_cond_false_286"
      input_arg {
        name: "placeholder"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_1"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_2"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_3"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_4"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_5"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_6"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_7"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_8"
        type: DT_FLOAT
      }
      input_arg {
        name: "placeholder_9"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_10"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_11"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_12"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_13"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_14"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_15"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_16"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_17"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_18"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_19"
        type: DT_RESOURCE
      }
      input_arg {
        name: "updatequantile_resourceaccumulatorsetglobalstep_boosted_trees_stamp_token"
        type: DT_INT64
      }
      input_arg {
        name: "placeholder_20"
        type: DT_RESOURCE
      }
      input_arg {
        name: "placeholder_21"
        type: DT_RESOURCE
      }
      input_arg {
        name: "placeholder_22"
        type: DT_INT32
      }
      input_arg {
        name: "placeholder_23"
        type: DT_RESOURCE
      }
      input_arg {
        name: "placeholder_24"
        type: DT_RESOURCE
      }
      input_arg {
        name: "placeholder_25"
        type: DT_BOOL
      }
      input_arg {
        name: "updatequantile_transform_features_acceleration_expanddims_iteratorgetnext"
        type: DT_DOUBLE
      }
      input_arg {
        name: "updatequantile_transform_features_cylinders_expanddims_iteratorgetnext"
        type: DT_DOUBLE
      }
      input_arg {
        name: "updatequantile_transform_features_displacement_expanddims_iteratorgetnext"
        type: DT_DOUBLE
      }
      input_arg {
        name: "updatequantile_transform_features_horsepower_expanddims_iteratorgetnext"
        type: DT_DOUBLE
      }
      input_arg {
        name: "updatequantile_transform_features_weight_expanddims_iteratorgetnext"
        type: DT_DOUBLE
      }
      input_arg {
        name: "updatequantile_boostedtreesmakequantilesummaries_boosted_trees_const"
        type: DT_FLOAT
      }
      input_arg {
        name: "updatequantile_boostedtreesquantilestreamresourceaddsummaries_boosted_trees_quantileaccumulator"
        type: DT_RESOURCE
      }
      input_arg {
        name: "updatequantile_wait_until_quaniles_accumulated_boosted_trees_are_boundaries_ready"
        type: DT_RESOURCE
      }
      output_arg {
        name: "updatequantile_wait_until_quaniles_accumulated_identity"
        type: DT_BOOL
      }
      is_stateful: true
    }
    node_def {
      name: "UpdateQuantile/transform_features/Acceleration/ExpandDims/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "UpdateQuantile/transform_features/Acceleration/ExpandDims/dim"
      }
    }
    node_def {
      name: "UpdateQuantile/transform_features/Acceleration/ExpandDims"
      op: "ExpandDims"
      input: "updatequantile_transform_features_acceleration_expanddims_iteratorgetnext"
      input: "UpdateQuantile/transform_features/Acceleration/ExpandDims/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_DOUBLE
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "UpdateQuantile/transform_features/Acceleration/ExpandDims"
      }
    }
    node_def {
      name: "UpdateQuantile/transform_features/Acceleration/Cast"
      op: "Cast"
      input: "UpdateQuantile/transform_features/Acceleration/ExpandDims:output:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_DOUBLE
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "UpdateQuantile/transform_features/Acceleration/Cast"
      }
    }
    node_def {
      name: "UpdateQuantile/transform_features/Cylinders/ExpandDims/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "UpdateQuantile/transform_features/Cylinders/ExpandDims/dim"
      }
    }
    node_def {
      name: "UpdateQuantile/transform_features/Cylinders/ExpandDims"
      op: "ExpandDims"
      input: "updatequantile_transform_features_cylinders_expanddims_iteratorgetnext"
      input: "UpdateQuantile/transform_features/Cylinders/ExpandDims/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_DOUBLE
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "UpdateQuantile/transform_features/Cylinders/ExpandDims"
      }
    }
    node_def {
      name: "UpdateQuantile/transform_features/Cylinders/Cast"
      op: "Cast"
      input: "UpdateQuantile/transform_features/Cylinders/ExpandDims:output:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_DOUBLE
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "UpdateQuantile/transform_features/Cylinders/Cast"
      }
    }
    node_def {
      name: "UpdateQuantile/transform_features/Displacement/ExpandDims/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "UpdateQuantile/transform_features/Displacement/ExpandDims/dim"
      }
    }
    node_def {
      name: "UpdateQuantile/transform_features/Displacement/ExpandDims"
      op: "ExpandDims"
      input: "updatequantile_transform_features_displacement_expanddims_iteratorgetnext"
      input: "UpdateQuantile/transform_features/Displacement/ExpandDims/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_DOUBLE
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "UpdateQuantile/transform_features/Displacement/ExpandDims"
      }
    }
    node_def {
      name: "UpdateQuantile/transform_features/Displacement/Cast"
      op: "Cast"
      input: "UpdateQuantile/transform_features/Displacement/ExpandDims:output:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_DOUBLE
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "UpdateQuantile/transform_features/Displacement/Cast"
      }
    }
    node_def {
      name: "UpdateQuantile/transform_features/Horsepower/ExpandDims/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "UpdateQuantile/transform_features/Horsepower/ExpandDims/dim"
      }
    }
    node_def {
      name: "UpdateQuantile/transform_features/Horsepower/ExpandDims"
      op: "ExpandDims"
      input: "updatequantile_transform_features_horsepower_expanddims_iteratorgetnext"
      input: "UpdateQuantile/transform_features/Horsepower/ExpandDims/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_DOUBLE
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "UpdateQuantile/transform_features/Horsepower/ExpandDims"
      }
    }
    node_def {
      name: "UpdateQuantile/transform_features/Horsepower/Cast"
      op: "Cast"
      input: "UpdateQuantile/transform_features/Horsepower/ExpandDims:output:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_DOUBLE
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "UpdateQuantile/transform_features/Horsepower/Cast"
      }
    }
    node_def {
      name: "UpdateQuantile/transform_features/Weight/ExpandDims/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "UpdateQuantile/transform_features/Weight/ExpandDims/dim"
      }
    }
    node_def {
      name: "UpdateQuantile/transform_features/Weight/ExpandDims"
      op: "ExpandDims"
      input: "updatequantile_transform_features_weight_expanddims_iteratorgetnext"
      input: "UpdateQuantile/transform_features/Weight/ExpandDims/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_DOUBLE
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "UpdateQuantile/transform_features/Weight/ExpandDims"
      }
    }
    node_def {
      name: "UpdateQuantile/transform_features/Weight/Cast"
      op: "Cast"
      input: "UpdateQuantile/transform_features/Weight/ExpandDims:output:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_DOUBLE
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "UpdateQuantile/transform_features/Weight/Cast"
      }
    }
    node_def {
      name: "UpdateQuantile/unstack"
      op: "Unpack"
      input: "UpdateQuantile/transform_features/Acceleration/Cast:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 1
        }
      }
      attr {
        key: "num"
        value {
          i: 1
        }
      }
      experimental_debug_info {
        original_node_names: "UpdateQuantile/unstack"
      }
    }
    node_def {
      name: "UpdateQuantile/ExpandDims/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "UpdateQuantile/ExpandDims/dim"
      }
    }
    node_def {
      name: "UpdateQuantile/ExpandDims"
      op: "ExpandDims"
      input: "UpdateQuantile/unstack:output:0"
      input: "UpdateQuantile/ExpandDims/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "UpdateQuantile/ExpandDims"
      }
    }
    node_def {
      name: "UpdateQuantile/unstack_1"
      op: "Unpack"
      input: "UpdateQuantile/transform_features/Cylinders/Cast:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 1
        }
      }
      attr {
        key: "num"
        value {
          i: 1
        }
      }
      experimental_debug_info {
        original_node_names: "UpdateQuantile/unstack_1"
      }
    }
    node_def {
      name: "UpdateQuantile/ExpandDims_1/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "UpdateQuantile/ExpandDims_1/dim"
      }
    }
    node_def {
      name: "UpdateQuantile/ExpandDims_1"
      op: "ExpandDims"
      input: "UpdateQuantile/unstack_1:output:0"
      input: "UpdateQuantile/ExpandDims_1/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "UpdateQuantile/ExpandDims_1"
      }
    }
    node_def {
      name: "UpdateQuantile/unstack_2"
      op: "Unpack"
      input: "UpdateQuantile/transform_features/Displacement/Cast:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 1
        }
      }
      attr {
        key: "num"
        value {
          i: 1
        }
      }
      experimental_debug_info {
        original_node_names: "UpdateQuantile/unstack_2"
      }
    }
    node_def {
      name: "UpdateQuantile/ExpandDims_2/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "UpdateQuantile/ExpandDims_2/dim"
      }
    }
    node_def {
      name: "UpdateQuantile/ExpandDims_2"
      op: "ExpandDims"
      input: "UpdateQuantile/unstack_2:output:0"
      input: "UpdateQuantile/ExpandDims_2/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "UpdateQuantile/ExpandDims_2"
      }
    }
    node_def {
      name: "UpdateQuantile/unstack_3"
      op: "Unpack"
      input: "UpdateQuantile/transform_features/Horsepower/Cast:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 1
        }
      }
      attr {
        key: "num"
        value {
          i: 1
        }
      }
      experimental_debug_info {
        original_node_names: "UpdateQuantile/unstack_3"
      }
    }
    node_def {
      name: "UpdateQuantile/ExpandDims_3/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "UpdateQuantile/ExpandDims_3/dim"
      }
    }
    node_def {
      name: "UpdateQuantile/ExpandDims_3"
      op: "ExpandDims"
      input: "UpdateQuantile/unstack_3:output:0"
      input: "UpdateQuantile/ExpandDims_3/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "UpdateQuantile/ExpandDims_3"
      }
    }
    node_def {
      name: "UpdateQuantile/unstack_4"
      op: "Unpack"
      input: "UpdateQuantile/transform_features/Weight/Cast:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 1
        }
      }
      attr {
        key: "num"
        value {
          i: 1
        }
      }
      experimental_debug_info {
        original_node_names: "UpdateQuantile/unstack_4"
      }
    }
    node_def {
      name: "UpdateQuantile/ExpandDims_4/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "UpdateQuantile/ExpandDims_4/dim"
      }
    }
    node_def {
      name: "UpdateQuantile/ExpandDims_4"
      op: "ExpandDims"
      input: "UpdateQuantile/unstack_4:output:0"
      input: "UpdateQuantile/ExpandDims_4/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "UpdateQuantile/ExpandDims_4"
      }
    }
    node_def {
      name: "UpdateQuantile/Squeeze"
      op: "Squeeze"
      input: "UpdateQuantile/ExpandDims:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "UpdateQuantile/Squeeze"
      }
    }
    node_def {
      name: "UpdateQuantile/Squeeze_1"
      op: "Squeeze"
      input: "UpdateQuantile/ExpandDims_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "UpdateQuantile/Squeeze_1"
      }
    }
    node_def {
      name: "UpdateQuantile/Squeeze_2"
      op: "Squeeze"
      input: "UpdateQuantile/ExpandDims_2:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "UpdateQuantile/Squeeze_2"
      }
    }
    node_def {
      name: "UpdateQuantile/Squeeze_3"
      op: "Squeeze"
      input: "UpdateQuantile/ExpandDims_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "UpdateQuantile/Squeeze_3"
      }
    }
    node_def {
      name: "UpdateQuantile/Squeeze_4"
      op: "Squeeze"
      input: "UpdateQuantile/ExpandDims_4:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "UpdateQuantile/Squeeze_4"
      }
    }
    node_def {
      name: "UpdateQuantile/BoostedTreesMakeQuantileSummaries/epsilon"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.009999999776482582
          }
        }
      }
      experimental_debug_info {
        original_node_names: "UpdateQuantile/BoostedTreesMakeQuantileSummaries/epsilon"
      }
    }
    node_def {
      name: "UpdateQuantile/BoostedTreesMakeQuantileSummaries"
      op: "BoostedTreesMakeQuantileSummaries"
      input: "UpdateQuantile/Squeeze:output:0"
      input: "UpdateQuantile/Squeeze_1:output:0"
      input: "UpdateQuantile/Squeeze_2:output:0"
      input: "UpdateQuantile/Squeeze_3:output:0"
      input: "UpdateQuantile/Squeeze_4:output:0"
      input: "updatequantile_boostedtreesmakequantilesummaries_boosted_trees_const"
      input: "UpdateQuantile/BoostedTreesMakeQuantileSummaries/epsilon:output:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "num_features"
        value {
          i: 5
        }
      }
      experimental_debug_info {
        original_node_names: "UpdateQuantile/BoostedTreesMakeQuantileSummaries"
      }
    }
    node_def {
      name: "UpdateQuantile/BoostedTreesQuantileStreamResourceAddSummaries"
      op: "BoostedTreesQuantileStreamResourceAddSummaries"
      input: "updatequantile_boostedtreesquantilestreamresourceaddsummaries_boosted_trees_quantileaccumulator"
      input: "UpdateQuantile/BoostedTreesMakeQuantileSummaries:summaries:0"
      input: "UpdateQuantile/BoostedTreesMakeQuantileSummaries:summaries:1"
      input: "UpdateQuantile/BoostedTreesMakeQuantileSummaries:summaries:2"
      input: "UpdateQuantile/BoostedTreesMakeQuantileSummaries:summaries:3"
      input: "UpdateQuantile/BoostedTreesMakeQuantileSummaries:summaries:4"
      attr {
        key: "_output_shapes"
        value {
          list {
          }
        }
      }
      attr {
        key: "num_features"
        value {
          i: 5
        }
      }
      experimental_debug_info {
        original_node_names: "UpdateQuantile/BoostedTreesQuantileStreamResourceAddSummaries"
      }
    }
    node_def {
      name: "UpdateQuantile/conditional_accumulator"
      op: "ResourceConditionalAccumulator"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "reduction_type"
        value {
          s: "MEAN"
        }
      }
      attr {
        key: "shape"
        value {
          shape {
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "quantile_summary_accum"
        }
      }
      experimental_debug_info {
        original_node_names: "UpdateQuantile/conditional_accumulator"
      }
    }
    node_def {
      name: "UpdateQuantile/ResourceAccumulatorSetGlobalStep"
      op: "ResourceAccumulatorSetGlobalStep"
      input: "UpdateQuantile/conditional_accumulator:handle:0"
      input: "updatequantile_resourceaccumulatorsetglobalstep_boosted_trees_stamp_token"
      attr {
        key: "_output_shapes"
        value {
          list {
          }
        }
      }
      experimental_debug_info {
        original_node_names: "UpdateQuantile/ResourceAccumulatorSetGlobalStep"
      }
    }
    node_def {
      name: "UpdateQuantile/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "UpdateQuantile/Const"
      }
    }
    node_def {
      name: "UpdateQuantile/ResourceAccumulatorApplyGradient"
      op: "ResourceAccumulatorApplyGradient"
      input: "UpdateQuantile/conditional_accumulator:handle:0"
      input: "updatequantile_resourceaccumulatorsetglobalstep_boosted_trees_stamp_token"
      input: "UpdateQuantile/Const:output:0"
      attr {
        key: "_output_shapes"
        value {
          list {
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "UpdateQuantile/ResourceAccumulatorApplyGradient"
      }
    }
    node_def {
      name: "UpdateQuantile/group_deps"
      op: "NoOp"
      input: "^UpdateQuantile/BoostedTreesQuantileStreamResourceAddSummaries"
      input: "^UpdateQuantile/ResourceAccumulatorApplyGradient"
      input: "^UpdateQuantile/ResourceAccumulatorSetGlobalStep"
      attr {
        key: "_output_shapes"
        value {
          list {
          }
        }
      }
      experimental_debug_info {
        original_node_names: "UpdateQuantile/group_deps"
      }
    }
    node_def {
      name: "UpdateQuantile/conditional_accumulator_NumAccumulated"
      op: "ResourceAccumulatorNumAccumulated"
      input: "UpdateQuantile/conditional_accumulator:handle:0"
      input: "^UpdateQuantile/group_deps"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "UpdateQuantile/conditional_accumulator_NumAccumulated"
      }
    }
    node_def {
      name: "UpdateQuantile/GreaterEqual/y"
      op: "Const"
      input: "^UpdateQuantile/group_deps"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 20
          }
        }
      }
      experimental_debug_info {
        original_node_names: "UpdateQuantile/GreaterEqual/y"
      }
    }
    node_def {
      name: "UpdateQuantile/GreaterEqual"
      op: "GreaterEqual"
      input: "UpdateQuantile/conditional_accumulator_NumAccumulated:num_accumulated:0"
      input: "UpdateQuantile/GreaterEqual/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "UpdateQuantile/GreaterEqual"
      }
    }
    node_def {
      name: "UpdateQuantile/wait_until_quaniles_accumulated"
      op: "If"
      input: "UpdateQuantile/GreaterEqual:z:0"
      input: "UpdateQuantile/conditional_accumulator:handle:0"
      input: "updatequantile_boostedtreesquantilestreamresourceaddsummaries_boosted_trees_quantileaccumulator"
      input: "updatequantile_wait_until_quaniles_accumulated_boosted_trees_are_boundaries_ready"
      input: "UpdateQuantile/GreaterEqual:z:0"
      attr {
        key: "Tcond"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Tin"
        value {
          list {
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "_lower_using_switch_merge"
        value {
          b: true
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "_read_only_resource_inputs"
        value {
          list {
          }
        }
      }
      attr {
        key: "else_branch"
        value {
          func {
            name: "UpdateQuantile_wait_until_quaniles_accumulated_false_568"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "then_branch"
        value {
          func {
            name: "UpdateQuantile_wait_until_quaniles_accumulated_true_567"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "UpdateQuantile/wait_until_quaniles_accumulated"
      }
    }
    node_def {
      name: "UpdateQuantile/wait_until_quaniles_accumulated/Identity"
      op: "Identity"
      input: "UpdateQuantile/wait_until_quaniles_accumulated:output:0"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "UpdateQuantile/wait_until_quaniles_accumulated/Identity"
      }
    }
    ret {
      key: "updatequantile_wait_until_quaniles_accumulated_identity"
      value: "UpdateQuantile/wait_until_quaniles_accumulated/Identity:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
          shape {
          }
          shape {
            dim {
              size: -1
            }
            dim {
              size: 1
            }
          }
          shape {
            dim {
              size: -1
            }
            dim {
              size: 1
            }
          }
          shape {
          }
          shape {
            dim {
              size: -1
            }
            dim {
              size: 1
            }
          }
          shape {
          }
          shape {
            dim {
              size: -1
            }
            dim {
              size: 1
            }
          }
          shape {
            dim {
              size: -1
            }
            dim {
              size: 1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
            dim {
              size: 1
            }
          }
          shape {
            dim {
              size: -1
            }
            dim {
              size: 1
            }
          }
          shape {
            dim {
              size: -1
            }
            dim {
              size: 1
            }
          }
          shape {
            dim {
              size: -1
            }
            dim {
              size: 1
            }
          }
          shape {
            dim {
              size: -1
            }
            dim {
              size: 1
            }
          }
          shape {
            dim {
              size: -1
            }
            dim {
              size: 1
            }
          }
          shape {
            dim {
              size: -1
            }
            dim {
              size: 1
            }
          }
          shape {
            dim {
              size: -1
            }
            dim {
              size: 1
            }
          }
          shape {
            dim {
              size: -1
            }
            dim {
              size: 1
            }
          }
          shape {
            unknown_rank: true
          }
          shape {
          }
          shape {
            unknown_rank: true
          }
          shape {
            unknown_rank: true
          }
          shape {
            dim {
              size: 2
            }
          }
          shape {
            unknown_rank: true
          }
          shape {
            unknown_rank: true
          }
          shape {
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: -1
            }
          }
          shape {
            dim {
              size: 1
            }
          }
          shape {
            unknown_rank: true
          }
          shape {
            unknown_rank: true
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 1
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 1
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 5
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 1
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 6
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 7
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 1
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 8
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 1
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 9
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 10
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 1
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 11
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 1
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 12
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 1
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 13
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 1
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 14
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 1
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 15
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 1
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 16
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 1
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 17
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 1
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 18
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 1
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 19
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 2
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 20
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 21
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 2
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 22
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 2
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 23
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 2
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 24
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 25
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 26
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 27
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 28
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 29
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 30
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 31
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 32
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 1
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 33
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 34
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "global_step_cond_true_40"
      input_arg {
        name: "read_readvariableop_global_step"
        type: DT_RESOURCE
      }
      input_arg {
        name: "placeholder"
        type: DT_INT64
      }
      output_arg {
        name: "identity"
        type: DT_INT64
      }
      is_stateful: true
    }
    node_def {
      name: "Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "read_readvariableop_global_step"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      experimental_debug_info {
        original_node_names: "Read/ReadVariableOp"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "Read/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            unknown_rank: true
          }
          shape {
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "wait_until_n_batches_accumulated_true_426"
      input_arg {
        name: "resourceaccumulatortakegradient_boosted_trees_conditional_accumulator"
        type: DT_RESOURCE
      }
      input_arg {
        name: "resourceaccumulatortakegradient_1_boosted_trees_conditional_accumulator_1"
        type: DT_RESOURCE
      }
      input_arg {
        name: "resourceaccumulatortakegradient_2_boosted_trees_conditional_accumulator_2"
        type: DT_RESOURCE
      }
      input_arg {
        name: "boostedtreescalculatebestfeaturesplitv2_boosted_trees_last_layer_nodes_range"
        type: DT_INT32
      }
      input_arg {
        name: "boostedtreesupdateensemblev2_boosted_trees"
        type: DT_RESOURCE
      }
      input_arg {
        name: "identity_greaterequal"
        type: DT_BOOL
      }
      output_arg {
        name: "identity"
        type: DT_BOOL
      }
      is_stateful: true
    }
    node_def {
      name: "ResourceAccumulatorTakeGradient/num_required"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "ResourceAccumulatorTakeGradient/num_required"
      }
    }
    node_def {
      name: "ResourceAccumulatorTakeGradient"
      op: "ResourceAccumulatorTakeGradient"
      input: "resourceaccumulatortakegradient_boosted_trees_conditional_accumulator"
      input: "ResourceAccumulatorTakeGradient/num_required:output:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 5
              }
              dim {
                size: 63
              }
              dim {
                size: 1
              }
              dim {
                size: 101
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "ResourceAccumulatorTakeGradient"
      }
    }
    node_def {
      name: "unstack"
      op: "Unpack"
      input: "ResourceAccumulatorTakeGradient:average:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 63
              }
              dim {
                size: 1
              }
              dim {
                size: 101
              }
              dim {
                size: 2
              }
            }
            shape {
              dim {
                size: 63
              }
              dim {
                size: 1
              }
              dim {
                size: 101
              }
              dim {
                size: 2
              }
            }
            shape {
              dim {
                size: 63
              }
              dim {
                size: 1
              }
              dim {
                size: 101
              }
              dim {
                size: 2
              }
            }
            shape {
              dim {
                size: 63
              }
              dim {
                size: 1
              }
              dim {
                size: 101
              }
              dim {
                size: 2
              }
            }
            shape {
              dim {
                size: 63
              }
              dim {
                size: 1
              }
              dim {
                size: 101
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
      attr {
        key: "num"
        value {
          i: 5
        }
      }
      experimental_debug_info {
        original_node_names: "unstack"
      }
    }
    node_def {
      name: "ResourceAccumulatorTakeGradient_1/num_required"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "ResourceAccumulatorTakeGradient_1/num_required"
      }
    }
    node_def {
      name: "ResourceAccumulatorTakeGradient_1"
      op: "ResourceAccumulatorTakeGradient"
      input: "resourceaccumulatortakegradient_1_boosted_trees_conditional_accumulator_1"
      input: "ResourceAccumulatorTakeGradient_1/num_required:output:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 63
              }
              dim {
                size: 1
              }
              dim {
                size: 3
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "ResourceAccumulatorTakeGradient_1"
      }
    }
    node_def {
      name: "unstack_1"
      op: "Unpack"
      input: "ResourceAccumulatorTakeGradient_1:average:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 63
              }
              dim {
                size: 1
              }
              dim {
                size: 3
              }
              dim {
                size: 2
              }
            }
            shape {
              dim {
                size: 63
              }
              dim {
                size: 1
              }
              dim {
                size: 3
              }
              dim {
                size: 2
              }
            }
            shape {
              dim {
                size: 63
              }
              dim {
                size: 1
              }
              dim {
                size: 3
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
      attr {
        key: "num"
        value {
          i: 3
        }
      }
      experimental_debug_info {
        original_node_names: "unstack_1"
      }
    }
    node_def {
      name: "ResourceAccumulatorTakeGradient_2/num_required"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "ResourceAccumulatorTakeGradient_2/num_required"
      }
    }
    node_def {
      name: "ResourceAccumulatorTakeGradient_2"
      op: "ResourceAccumulatorTakeGradient"
      input: "resourceaccumulatortakegradient_2_boosted_trees_conditional_accumulator_2"
      input: "ResourceAccumulatorTakeGradient_2/num_required:output:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 63
              }
              dim {
                size: 1
              }
              dim {
                size: 5
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "ResourceAccumulatorTakeGradient_2"
      }
    }
    node_def {
      name: "unstack_2"
      op: "Unpack"
      input: "ResourceAccumulatorTakeGradient_2:average:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 63
              }
              dim {
                size: 1
              }
              dim {
                size: 5
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
      attr {
        key: "num"
        value {
          i: 1
        }
      }
      experimental_debug_info {
        original_node_names: "unstack_2"
      }
    }
    node_def {
      name: "BoostedTreesCalculateBestFeatureSplitV2/split_types"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 5
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 5
              }
            }
            string_val: "inequality"
            string_val: "inequality"
            string_val: "inequality"
            string_val: "inequality"
            string_val: "inequality"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "BoostedTreesCalculateBestFeatureSplitV2/split_types"
      }
    }
    node_def {
      name: "BoostedTreesCalculateBestFeatureSplitV2/candidate_feature_ids"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 5
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 5
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000\010\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "BoostedTreesCalculateBestFeatureSplitV2/candidate_feature_ids"
      }
    }
    node_def {
      name: "BoostedTreesCalculateBestFeatureSplitV2/l1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "BoostedTreesCalculateBestFeatureSplitV2/l1"
      }
    }
    node_def {
      name: "BoostedTreesCalculateBestFeatureSplitV2/l2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "BoostedTreesCalculateBestFeatureSplitV2/l2"
      }
    }
    node_def {
      name: "BoostedTreesCalculateBestFeatureSplitV2/tree_complexity"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "BoostedTreesCalculateBestFeatureSplitV2/tree_complexity"
      }
    }
    node_def {
      name: "BoostedTreesCalculateBestFeatureSplitV2/min_node_weight"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "BoostedTreesCalculateBestFeatureSplitV2/min_node_weight"
      }
    }
    node_def {
      name: "BoostedTreesCalculateBestFeatureSplitV2"
      op: "BoostedTreesCalculateBestFeatureSplitV2"
      input: "boostedtreescalculatebestfeaturesplitv2_boosted_trees_last_layer_nodes_range"
      input: "unstack:output:0"
      input: "unstack:output:1"
      input: "unstack:output:2"
      input: "unstack:output:3"
      input: "unstack:output:4"
      input: "BoostedTreesCalculateBestFeatureSplitV2/split_types:output:0"
      input: "BoostedTreesCalculateBestFeatureSplitV2/candidate_feature_ids:output:0"
      input: "BoostedTreesCalculateBestFeatureSplitV2/l1:output:0"
      input: "BoostedTreesCalculateBestFeatureSplitV2/l2:output:0"
      input: "BoostedTreesCalculateBestFeatureSplitV2/tree_complexity:output:0"
      input: "BoostedTreesCalculateBestFeatureSplitV2/min_node_weight:output:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "logits_dimension"
        value {
          i: 1
        }
      }
      attr {
        key: "num_features"
        value {
          i: 5
        }
      }
      experimental_debug_info {
        original_node_names: "BoostedTreesCalculateBestFeatureSplitV2"
      }
    }
    node_def {
      name: "BoostedTreesCalculateBestFeatureSplitV2_1/split_types"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 3
              }
            }
            string_val: "inequality"
            string_val: "inequality"
            string_val: "inequality"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "BoostedTreesCalculateBestFeatureSplitV2_1/split_types"
      }
    }
    node_def {
      name: "BoostedTreesCalculateBestFeatureSplitV2_1/candidate_feature_ids"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\005\000\000\000\006\000\000\000\007\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "BoostedTreesCalculateBestFeatureSplitV2_1/candidate_feature_ids"
      }
    }
    node_def {
      name: "BoostedTreesCalculateBestFeatureSplitV2_1/l1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "BoostedTreesCalculateBestFeatureSplitV2_1/l1"
      }
    }
    node_def {
      name: "BoostedTreesCalculateBestFeatureSplitV2_1/l2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "BoostedTreesCalculateBestFeatureSplitV2_1/l2"
      }
    }
    node_def {
      name: "BoostedTreesCalculateBestFeatureSplitV2_1/tree_complexity"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "BoostedTreesCalculateBestFeatureSplitV2_1/tree_complexity"
      }
    }
    node_def {
      name: "BoostedTreesCalculateBestFeatureSplitV2_1/min_node_weight"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "BoostedTreesCalculateBestFeatureSplitV2_1/min_node_weight"
      }
    }
    node_def {
      name: "BoostedTreesCalculateBestFeatureSplitV2_1"
      op: "BoostedTreesCalculateBestFeatureSplitV2"
      input: "boostedtreescalculatebestfeaturesplitv2_boosted_trees_last_layer_nodes_range"
      input: "unstack_1:output:0"
      input: "unstack_1:output:1"
      input: "unstack_1:output:2"
      input: "BoostedTreesCalculateBestFeatureSplitV2_1/split_types:output:0"
      input: "BoostedTreesCalculateBestFeatureSplitV2_1/candidate_feature_ids:output:0"
      input: "BoostedTreesCalculateBestFeatureSplitV2_1/l1:output:0"
      input: "BoostedTreesCalculateBestFeatureSplitV2_1/l2:output:0"
      input: "BoostedTreesCalculateBestFeatureSplitV2_1/tree_complexity:output:0"
      input: "BoostedTreesCalculateBestFeatureSplitV2_1/min_node_weight:output:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "logits_dimension"
        value {
          i: 1
        }
      }
      attr {
        key: "num_features"
        value {
          i: 3
        }
      }
      experimental_debug_info {
        original_node_names: "BoostedTreesCalculateBestFeatureSplitV2_1"
      }
    }
    node_def {
      name: "BoostedTreesCalculateBestFeatureSplitV2_2/split_types"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "inequality"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "BoostedTreesCalculateBestFeatureSplitV2_2/split_types"
      }
    }
    node_def {
      name: "BoostedTreesCalculateBestFeatureSplitV2_2/candidate_feature_ids"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 4
          }
        }
      }
      experimental_debug_info {
        original_node_names: "BoostedTreesCalculateBestFeatureSplitV2_2/candidate_feature_ids"
      }
    }
    node_def {
      name: "BoostedTreesCalculateBestFeatureSplitV2_2/l1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "BoostedTreesCalculateBestFeatureSplitV2_2/l1"
      }
    }
    node_def {
      name: "BoostedTreesCalculateBestFeatureSplitV2_2/l2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "BoostedTreesCalculateBestFeatureSplitV2_2/l2"
      }
    }
    node_def {
      name: "BoostedTreesCalculateBestFeatureSplitV2_2/tree_complexity"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "BoostedTreesCalculateBestFeatureSplitV2_2/tree_complexity"
      }
    }
    node_def {
      name: "BoostedTreesCalculateBestFeatureSplitV2_2/min_node_weight"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "BoostedTreesCalculateBestFeatureSplitV2_2/min_node_weight"
      }
    }
    node_def {
      name: "BoostedTreesCalculateBestFeatureSplitV2_2"
      op: "BoostedTreesCalculateBestFeatureSplitV2"
      input: "boostedtreescalculatebestfeaturesplitv2_boosted_trees_last_layer_nodes_range"
      input: "unstack_2:output:0"
      input: "BoostedTreesCalculateBestFeatureSplitV2_2/split_types:output:0"
      input: "BoostedTreesCalculateBestFeatureSplitV2_2/candidate_feature_ids:output:0"
      input: "BoostedTreesCalculateBestFeatureSplitV2_2/l1:output:0"
      input: "BoostedTreesCalculateBestFeatureSplitV2_2/l2:output:0"
      input: "BoostedTreesCalculateBestFeatureSplitV2_2/tree_complexity:output:0"
      input: "BoostedTreesCalculateBestFeatureSplitV2_2/min_node_weight:output:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "logits_dimension"
        value {
          i: 1
        }
      }
      attr {
        key: "num_features"
        value {
          i: 1
        }
      }
      experimental_debug_info {
        original_node_names: "BoostedTreesCalculateBestFeatureSplitV2_2"
      }
    }
    node_def {
      name: "BoostedTreesUpdateEnsembleV2/max_depth"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 6
          }
        }
      }
      experimental_debug_info {
        original_node_names: "BoostedTreesUpdateEnsembleV2/max_depth"
      }
    }
    node_def {
      name: "BoostedTreesUpdateEnsembleV2/learning_rate"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.10000000149011612
          }
        }
      }
      experimental_debug_info {
        original_node_names: "BoostedTreesUpdateEnsembleV2/learning_rate"
      }
    }
    node_def {
      name: "BoostedTreesUpdateEnsembleV2/pruning_mode"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "BoostedTreesUpdateEnsembleV2/pruning_mode"
      }
    }
    node_def {
      name: "BoostedTreesUpdateEnsembleV2"
      op: "BoostedTreesUpdateEnsembleV2"
      input: "boostedtreesupdateensemblev2_boosted_trees"
      input: "BoostedTreesCalculateBestFeatureSplitV2:feature_ids:0"
      input: "BoostedTreesCalculateBestFeatureSplitV2_1:feature_ids:0"
      input: "BoostedTreesCalculateBestFeatureSplitV2_2:feature_ids:0"
      input: "BoostedTreesCalculateBestFeatureSplitV2:feature_dimensions:0"
      input: "BoostedTreesCalculateBestFeatureSplitV2_1:feature_dimensions:0"
      input: "BoostedTreesCalculateBestFeatureSplitV2_2:feature_dimensions:0"
      input: "BoostedTreesCalculateBestFeatureSplitV2:node_ids:0"
      input: "BoostedTreesCalculateBestFeatureSplitV2_1:node_ids:0"
      input: "BoostedTreesCalculateBestFeatureSplitV2_2:node_ids:0"
      input: "BoostedTreesCalculateBestFeatureSplitV2:gains:0"
      input: "BoostedTreesCalculateBestFeatureSplitV2_1:gains:0"
      input: "BoostedTreesCalculateBestFeatureSplitV2_2:gains:0"
      input: "BoostedTreesCalculateBestFeatureSplitV2:thresholds:0"
      input: "BoostedTreesCalculateBestFeatureSplitV2_1:thresholds:0"
      input: "BoostedTreesCalculateBestFeatureSplitV2_2:thresholds:0"
      input: "BoostedTreesCalculateBestFeatureSplitV2:left_node_contribs:0"
      input: "BoostedTreesCalculateBestFeatureSplitV2_1:left_node_contribs:0"
      input: "BoostedTreesCalculateBestFeatureSplitV2_2:left_node_contribs:0"
      input: "BoostedTreesCalculateBestFeatureSplitV2:right_node_contribs:0"
      input: "BoostedTreesCalculateBestFeatureSplitV2_1:right_node_contribs:0"
      input: "BoostedTreesCalculateBestFeatureSplitV2_2:right_node_contribs:0"
      input: "BoostedTreesCalculateBestFeatureSplitV2:split_with_default_directions:0"
      input: "BoostedTreesCalculateBestFeatureSplitV2_1:split_with_default_directions:0"
      input: "BoostedTreesCalculateBestFeatureSplitV2_2:split_with_default_directions:0"
      input: "BoostedTreesUpdateEnsembleV2/max_depth:output:0"
      input: "BoostedTreesUpdateEnsembleV2/learning_rate:output:0"
      input: "BoostedTreesUpdateEnsembleV2/pruning_mode:output:0"
      attr {
        key: "_output_shapes"
        value {
          list {
          }
        }
      }
      attr {
        key: "logits_dimension"
        value {
          i: 1
        }
      }
      attr {
        key: "num_features"
        value {
          i: 3
        }
      }
      attr {
        key: "num_groups"
        value {
          i: 3
        }
      }
      experimental_debug_info {
        original_node_names: "BoostedTreesUpdateEnsembleV2"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "identity_greaterequal"
      input: "^BoostedTreesUpdateEnsembleV2"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            unknown_rank: true
          }
          shape {
            unknown_rank: true
          }
          shape {
            unknown_rank: true
          }
          shape {
            dim {
              size: 2
            }
          }
          shape {
            unknown_rank: true
          }
          shape {
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 2
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 2
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 2
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 2
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 4
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 5
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "UpdateQuantile_wait_until_quaniles_accumulated_true_567"
      input_arg {
        name: "resourceaccumulatortakegradient_updatequantile_conditional_accumulator"
        type: DT_RESOURCE
      }
      input_arg {
        name: "boostedtreesquantilestreamresourceflush_boosted_trees_quantileaccumulator"
        type: DT_RESOURCE
      }
      input_arg {
        name: "assignvariableop_boosted_trees_are_boundaries_ready"
        type: DT_RESOURCE
      }
      input_arg {
        name: "identity_updatequantile_greaterequal"
        type: DT_BOOL
      }
      output_arg {
        name: "identity"
        type: DT_BOOL
      }
      is_stateful: true
    }
    node_def {
      name: "ResourceAccumulatorTakeGradient/num_required"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "ResourceAccumulatorTakeGradient/num_required"
      }
    }
    node_def {
      name: "ResourceAccumulatorTakeGradient"
      op: "ResourceAccumulatorTakeGradient"
      input: "resourceaccumulatortakegradient_updatequantile_conditional_accumulator"
      input: "ResourceAccumulatorTakeGradient/num_required:output:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "ResourceAccumulatorTakeGradient"
      }
    }
    node_def {
      name: "BoostedTreesQuantileStreamResourceFlush/num_buckets"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 100
          }
        }
      }
      experimental_debug_info {
        original_node_names: "BoostedTreesQuantileStreamResourceFlush/num_buckets"
      }
    }
    node_def {
      name: "BoostedTreesQuantileStreamResourceFlush"
      op: "BoostedTreesQuantileStreamResourceFlush"
      input: "boostedtreesquantilestreamresourceflush_boosted_trees_quantileaccumulator"
      input: "BoostedTreesQuantileStreamResourceFlush/num_buckets:output:0"
      attr {
        key: "_output_shapes"
        value {
          list {
          }
        }
      }
      attr {
        key: "generate_quantiles"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "BoostedTreesQuantileStreamResourceFlush"
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_BOOL
            tensor_shape {
            }
            bool_val: true
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const"
      }
    }
    node_def {
      name: "AssignVariableOp"
      op: "AssignVariableOp"
      input: "assignvariableop_boosted_trees_are_boundaries_ready"
      input: "Const:output:0"
      attr {
        key: "_output_shapes"
        value {
          list {
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_BOOL
        }
      }
      experimental_debug_info {
        original_node_names: "AssignVariableOp"
      }
    }
    node_def {
      name: "group_deps"
      op: "NoOp"
      input: "^AssignVariableOp"
      input: "^BoostedTreesQuantileStreamResourceFlush"
      input: "^ResourceAccumulatorTakeGradient"
      attr {
        key: "_output_shapes"
        value {
          list {
          }
        }
      }
      experimental_debug_info {
        original_node_names: "group_deps"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "identity_updatequantile_greaterequal"
      input: "^group_deps"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            unknown_rank: true
          }
          shape {
            unknown_rank: true
          }
          shape {
            unknown_rank: true
          }
          shape {
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 2
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
}
versions {
  producer: 175
  min_consumer: 12
}
